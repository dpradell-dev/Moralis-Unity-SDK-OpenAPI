/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetNFTsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftCollection</returns>
        NftCollection GetContractNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftCollection</returns>
        ApiResponse<NftCollection> GetContractNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        NftOwnerCollection GetWalletNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        ApiResponse<NftOwnerCollection> GetWalletNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>NftMetadataCollection</returns>
        NftMetadataCollection SearchNFTs(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));

        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of NftMetadataCollection</returns>
        ApiResponse<NftMetadataCollection> SearchNFTsWithHttpInfo(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetNFTsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftCollection</returns>
        System.Threading.Tasks.Task<NftCollection> GetContractNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftCollection>> GetContractNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        System.Threading.Tasks.Task<NftOwnerCollection> GetWalletNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftOwnerCollection>> GetWalletNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftMetadataCollection</returns>
        System.Threading.Tasks.Task<NftMetadataCollection> SearchNFTsAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftMetadataCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftMetadataCollection>> SearchNFTsWithHttpInfoAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetNFTsApi : IGetNFTsApiSync, IGetNFTsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetNFTsApi : IDisposable, IGetNFTsApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GetNFTsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GetNFTsApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GetNFTsApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetNFTsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetNFTsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetNFTsApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetNFTsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GetNFTsApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftCollection</returns>
        public NftCollection GetContractNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftCollection> localVarResponse = GetContractNFTsWithHttpInfo(address, chain, format, limit, disableTotal, totalRanges, range, cursor, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftCollection> GetContractNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetNFTsApi->GetContractNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (totalRanges != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "totalRanges", totalRanges));
            }
            if (range != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftCollection>("/nft/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftCollection</returns>
        public async System.Threading.Tasks.Task<NftCollection> GetContractNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftCollection> localVarResponse = await GetContractNFTsWithHttpInfoAsync(address, chain, format, limit, disableTotal, totalRanges, range, cursor, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftCollection>> GetContractNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetNFTsApi->GetContractNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (totalRanges != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "totalRanges", totalRanges));
            }
            if (range != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftCollection>("/nft/{address}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        public NftOwnerCollection GetWalletNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = GetWalletNFTsWithHttpInfo(address, chain, format, limit, disableTotal, tokenAddresses, cursor, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> GetWalletNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetNFTsApi->GetWalletNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (tokenAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "token_addresses", tokenAddresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftOwnerCollection>("/{address}/nft", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        public async System.Threading.Tasks.Task<NftOwnerCollection> GetWalletNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = await GetWalletNFTsWithHttpInfoAsync(address, chain, format, limit, disableTotal, tokenAddresses, cursor, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection>> GetWalletNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetNFTsApi->GetWalletNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (tokenAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "token_addresses", tokenAddresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftOwnerCollection>("/{address}/nft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>NftMetadataCollection</returns>
        public NftMetadataCollection SearchNFTs(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection> localVarResponse = SearchNFTsWithHttpInfo(q, chain, format, filter, fromBlock, toBlock, fromDate, toDate, addresses, cursor, limit, disableTotal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of NftMetadataCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection> SearchNFTsWithHttpInfo(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'q' when calling GetNFTsApi->SearchNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (addresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "addresses", addresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftMetadataCollection>("/nft/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftMetadataCollection</returns>
        public async System.Threading.Tasks.Task<NftMetadataCollection> SearchNFTsAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection> localVarResponse = await SearchNFTsWithHttpInfoAsync(q, chain, format, filter, fromBlock, toBlock, fromDate, toDate, addresses, cursor, limit, disableTotal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftMetadataCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection>> SearchNFTsWithHttpInfoAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'q' when calling GetNFTsApi->SearchNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (addresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "addresses", addresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftMetadataCollection>("/nft/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
