/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftCollection</returns>
        NftCollection GetContractNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftCollection</returns>
        ApiResponse<NftCollection> GetContractNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Get Multiple NFTs
        /// </summary>
        /// <remarks>
        /// Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>List&lt;NftOwner&gt;</returns>
        List<NftOwner> GetMultipleNFTs(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Get Multiple NFTs
        /// </summary>
        /// <remarks>
        /// Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of List&lt;NftOwner&gt;</returns>
        ApiResponse<List<NftOwner>> GetMultipleNFTsWithHttpInfo(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?));
        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>NftContractMetadata</returns>
        NftContractMetadata GetNFTContractMetadata(string address, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of NftContractMetadata</returns>
        ApiResponse<NftContractMetadata> GetNFTContractMetadataWithHttpInfo(string address, ChainList? chain = default(ChainList?));
        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTContractTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTContractTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>Trade</returns>
        Trade GetNFTLowestPrice(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string));

        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>ApiResponse of Trade</returns>
        ApiResponse<Trade> GetNFTLowestPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string));
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>Nft</returns>
        Nft GetNFTMetadata(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of Nft</returns>
        ApiResponse<Nft> GetNFTMetadataWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Get NFT owners by contract
        /// </summary>
        /// <remarks>
        /// Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        NftOwnerCollection GetNFTOwners(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFT owners by contract
        /// </summary>
        /// <remarks>
        /// Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        ApiResponse<NftOwnerCollection> GetNFTOwnersWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Get NFT owners by token ID
        /// </summary>
        /// <remarks>
        /// Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        NftOwnerCollection GetNFTTokenIdOwners(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFT owners by token ID
        /// </summary>
        /// <remarks>
        /// Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        ApiResponse<NftOwnerCollection> GetNFTTokenIdOwnersWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>TradeCollection</returns>
        TradeCollection GetNFTTrades(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));

        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of TradeCollection</returns>
        ApiResponse<TradeCollection> GetNFTTradesWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));
        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTTransfers(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTTransfersWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTTransfersByBlock(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTTransfersByBlockWithHttpInfo(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTTransfersFromToBlock(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTTransfersFromToBlockWithHttpInfo(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftWalletCollections</returns>
        NftWalletCollections GetWalletNFTCollections(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftWalletCollections</returns>
        ApiResponse<NftWalletCollections> GetWalletNFTCollectionsWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetWalletNFTTransfers(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetWalletNFTTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        NftOwnerCollection GetWalletNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?));

        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        ApiResponse<NftOwnerCollection> GetWalletNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?));
        /// <summary>
        /// Resync NFT metadata
        /// </summary>
        /// <remarks>
        /// Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <returns>MetadataResync</returns>
        MetadataResync ReSyncMetadata(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string));

        /// <summary>
        /// Resync NFT metadata
        /// </summary>
        /// <remarks>
        /// Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <returns>ApiResponse of MetadataResync</returns>
        ApiResponse<MetadataResync> ReSyncMetadataWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string));
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>NftMetadataCollection</returns>
        NftMetadataCollection SearchNFTs(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));

        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of NftMetadataCollection</returns>
        ApiResponse<NftMetadataCollection> SearchNFTsWithHttpInfo(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));
        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns></returns>
        void SyncNFTContract(string address, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncNFTContractWithHttpInfo(string address, ChainList? chain = default(ChainList?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftCollection</returns>
        System.Threading.Tasks.Task<NftCollection> GetContractNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFTs by contract
        /// </summary>
        /// <remarks>
        /// Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftCollection>> GetContractNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Multiple NFTs
        /// </summary>
        /// <remarks>
        /// Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftOwner&gt;</returns>
        System.Threading.Tasks.Task<List<NftOwner>> GetMultipleNFTsAsync(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Multiple NFTs
        /// </summary>
        /// <remarks>
        /// Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftOwner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NftOwner>>> GetMultipleNFTsWithHttpInfoAsync(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftContractMetadata</returns>
        System.Threading.Tasks.Task<NftContractMetadata> GetNFTContractMetadataAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftContractMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftContractMetadata>> GetNFTContractMetadataWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTContractTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTContractTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Trade</returns>
        System.Threading.Tasks.Task<Trade> GetNFTLowestPriceAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Trade)</returns>
        System.Threading.Tasks.Task<ApiResponse<Trade>> GetNFTLowestPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Nft</returns>
        System.Threading.Tasks.Task<Nft> GetNFTMetadataAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT metadata
        /// </summary>
        /// <remarks>
        /// Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Nft)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nft>> GetNFTMetadataWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT owners by contract
        /// </summary>
        /// <remarks>
        /// Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        System.Threading.Tasks.Task<NftOwnerCollection> GetNFTOwnersAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT owners by contract
        /// </summary>
        /// <remarks>
        /// Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftOwnerCollection>> GetNFTOwnersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT owners by token ID
        /// </summary>
        /// <remarks>
        /// Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        System.Threading.Tasks.Task<NftOwnerCollection> GetNFTTokenIdOwnersAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT owners by token ID
        /// </summary>
        /// <remarks>
        /// Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftOwnerCollection>> GetNFTTokenIdOwnersWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeCollection</returns>
        System.Threading.Tasks.Task<TradeCollection> GetNFTTradesAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeCollection>> GetNFTTradesWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTTransfersWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersByBlockAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTTransfersByBlockWithHttpInfoAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersFromToBlockAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTTransfersFromToBlockWithHttpInfoAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftWalletCollections</returns>
        System.Threading.Tasks.Task<NftWalletCollections> GetWalletNFTCollectionsAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftWalletCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftWalletCollections>> GetWalletNFTCollectionsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetWalletNFTTransfersAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetWalletNFTTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        System.Threading.Tasks.Task<NftOwnerCollection> GetWalletNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFTs by wallet
        /// </summary>
        /// <remarks>
        /// Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftOwnerCollection>> GetWalletNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resync NFT metadata
        /// </summary>
        /// <remarks>
        /// Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetadataResync</returns>
        System.Threading.Tasks.Task<MetadataResync> ReSyncMetadataAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resync NFT metadata
        /// </summary>
        /// <remarks>
        /// Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetadataResync)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataResync>> ReSyncMetadataWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftMetadataCollection</returns>
        System.Threading.Tasks.Task<NftMetadataCollection> SearchNFTsAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search NFTs
        /// </summary>
        /// <remarks>
        /// Get NFTs that match a given metadata search query.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftMetadataCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftMetadataCollection>> SearchNFTsWithHttpInfoAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncNFTContractAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncNFTContractWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INFTApi : INFTApiSync, INFTApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NFTApi : IDisposable, INFTApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public NFTApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public NFTApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public NFTApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NFTApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NFTApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NFTApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NFTApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public NFTApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftCollection</returns>
        public NftCollection GetContractNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftCollection> localVarResponse = GetContractNFTsWithHttpInfo(address, chain, format, limit, disableTotal, totalRanges, range, cursor, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftCollection> GetContractNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetContractNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (totalRanges != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "totalRanges", totalRanges));
            }
            if (range != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftCollection>("/nft/{address}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftCollection</returns>
        public async System.Threading.Tasks.Task<NftCollection> GetContractNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftCollection> localVarResponse = await GetContractNFTsWithHttpInfoAsync(address, chain, format, limit, disableTotal, totalRanges, range, cursor, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by contract Get NFTs for a given contract address, including metadata for all NFTs (where available). * Results are limited to 100 per page by default * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="totalRanges">The number of subranges to split the results into (optional)</param>
        /// <param name="range">The desired subrange to query (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftCollection>> GetContractNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), int? totalRanges = default(int?), int? range = default(int?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetContractNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (totalRanges != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "totalRanges", totalRanges));
            }
            if (range != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftCollection>("/nft/{address}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Multiple NFTs Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>List&lt;NftOwner&gt;</returns>
        public List<NftOwner> GetMultipleNFTs(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?))
        {
            Moralis.EvmApi.Client.ApiResponse<List<NftOwner>> localVarResponse = GetMultipleNFTsWithHttpInfo(getMultipleNftsDto, chain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Multiple NFTs Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of List&lt;NftOwner&gt;</returns>
        public Moralis.EvmApi.Client.ApiResponse<List<NftOwner>> GetMultipleNFTsWithHttpInfo(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'getMultipleNftsDto' is set
            if (getMultipleNftsDto == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'getMultipleNftsDto' when calling NFTApi->GetMultipleNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.Data = getMultipleNftsDto;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<NftOwner>>("/nft/getMultipleNFTs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultipleNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Multiple NFTs Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NftOwner&gt;</returns>
        public async System.Threading.Tasks.Task<List<NftOwner>> GetMultipleNFTsAsync(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<List<NftOwner>> localVarResponse = await GetMultipleNFTsWithHttpInfoAsync(getMultipleNftsDto, chain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Multiple NFTs Returns an array of NFTs specified in the request. * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested. * Only 25 NFTs can be fetched in one API call.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getMultipleNftsDto">Body</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NftOwner&gt;)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<List<NftOwner>>> GetMultipleNFTsWithHttpInfoAsync(GetMultipleNftsDto getMultipleNftsDto, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getMultipleNftsDto' is set
            if (getMultipleNftsDto == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'getMultipleNftsDto' when calling NFTApi->GetMultipleNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.Data = getMultipleNftsDto;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<NftOwner>>("/nft/getMultipleNFTs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMultipleNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>NftContractMetadata</returns>
        public NftContractMetadata GetNFTContractMetadata(string address, ChainList? chain = default(ChainList?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftContractMetadata> localVarResponse = GetNFTContractMetadataWithHttpInfo(address, chain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of NftContractMetadata</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftContractMetadata> GetNFTContractMetadataWithHttpInfo(string address, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTContractMetadata");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftContractMetadata>("/nft/{address}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftContractMetadata</returns>
        public async System.Threading.Tasks.Task<NftContractMetadata> GetNFTContractMetadataAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftContractMetadata> localVarResponse = await GetNFTContractMetadataWithHttpInfoAsync(address, chain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftContractMetadata)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftContractMetadata>> GetNFTContractMetadataWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTContractMetadata");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftContractMetadata>("/nft/{address}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTContractTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTContractTransfersWithHttpInfo(address, chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTContractTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTContractTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/nft/{address}/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTContractTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTContractTransfersWithHttpInfoAsync(address, chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTContractTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTContractTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/nft/{address}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>Trade</returns>
        public Trade GetNFTLowestPrice(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<Trade> localVarResponse = GetNFTLowestPriceWithHttpInfo(address, chain, days, marketplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>ApiResponse of Trade</returns>
        public Moralis.EvmApi.Client.ApiResponse<Trade> GetNFTLowestPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTLowestPrice");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (days != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "days", days));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Trade>("/nft/{address}/lowestprice", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTLowestPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Trade</returns>
        public async System.Threading.Tasks.Task<Trade> GetNFTLowestPriceAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Trade> localVarResponse = await GetNFTLowestPriceWithHttpInfoAsync(address, chain, days, marketplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Trade)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Trade>> GetNFTLowestPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTLowestPrice");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (days != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "days", days));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Trade>("/nft/{address}/lowestprice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTLowestPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT metadata Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>Nft</returns>
        public Nft GetNFTMetadata(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<Nft> localVarResponse = GetNFTMetadataWithHttpInfo(address, tokenId, chain, format, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT metadata Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of Nft</returns>
        public Moralis.EvmApi.Client.ApiResponse<Nft> GetNFTMetadataWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTMetadata");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->GetNFTMetadata");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Nft>("/nft/{address}/{token_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT metadata Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Nft</returns>
        public async System.Threading.Tasks.Task<Nft> GetNFTMetadataAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Nft> localVarResponse = await GetNFTMetadataWithHttpInfoAsync(address, tokenId, chain, format, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT metadata Get NFT data, including metadata (where available), for the given NFT token ID and contract address. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Nft)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Nft>> GetNFTMetadataWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTMetadata");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->GetNFTMetadata");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Nft>("/nft/{address}/{token_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT owners by contract Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        public NftOwnerCollection GetNFTOwners(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = GetNFTOwnersWithHttpInfo(address, chain, format, limit, disableTotal, cursor, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT owners by contract Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> GetNFTOwnersWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTOwners");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftOwnerCollection>("/nft/{address}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT owners by contract Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        public async System.Threading.Tasks.Task<NftOwnerCollection> GetNFTOwnersAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = await GetNFTOwnersWithHttpInfoAsync(address, chain, format, limit, disableTotal, cursor, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT owners by contract Get owners of NFTs for a given contract. * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection>> GetNFTOwnersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTOwners");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftOwnerCollection>("/nft/{address}/owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT owners by token ID Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        public NftOwnerCollection GetNFTTokenIdOwners(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = GetNFTTokenIdOwnersWithHttpInfo(address, tokenId, chain, format, limit, disableTotal, cursor, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT owners by token ID Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> GetNFTTokenIdOwnersWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTTokenIdOwners");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->GetNFTTokenIdOwners");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftOwnerCollection>("/nft/{address}/{token_id}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTokenIdOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT owners by token ID Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        public async System.Threading.Tasks.Task<NftOwnerCollection> GetNFTTokenIdOwnersAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = await GetNFTTokenIdOwnersWithHttpInfoAsync(address, tokenId, chain, format, limit, disableTotal, cursor, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT owners by token ID Get owners of a specific NFT given the contract address and token ID.  * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection>> GetNFTTokenIdOwnersWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTTokenIdOwners");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->GetNFTTokenIdOwners");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftOwnerCollection>("/nft/{address}/{token_id}/owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTokenIdOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>TradeCollection</returns>
        public TradeCollection GetNFTTrades(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<TradeCollection> localVarResponse = GetNFTTradesWithHttpInfo(address, chain, fromBlock, toBlock, fromDate, toDate, marketplace, cursor, limit, disableTotal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of TradeCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<TradeCollection> GetNFTTradesWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTTrades");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TradeCollection>("/nft/{address}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeCollection</returns>
        public async System.Threading.Tasks.Task<TradeCollection> GetNFTTradesAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<TradeCollection> localVarResponse = await GetNFTTradesWithHttpInfoAsync(address, chain, fromBlock, toBlock, fromDate, toDate, marketplace, cursor, limit, disableTotal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<TradeCollection>> GetNFTTradesWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTTrades");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradeCollection>("/nft/{address}/trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTTransfers(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTTransfersWithHttpInfo(address, tokenId, chain, format, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTTransfersWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTTransfers");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->GetNFTTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/nft/{address}/{token_id}/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTTransfersWithHttpInfoAsync(address, tokenId, chain, format, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTTransfersWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetNFTTransfers");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->GetNFTTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/nft/{address}/{token_id}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTTransfersByBlock(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTTransfersByBlockWithHttpInfo(blockNumberOrHash, chain, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTTransfersByBlockWithHttpInfo(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'blockNumberOrHash' is set
            if (blockNumberOrHash == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'blockNumberOrHash' when calling NFTApi->GetNFTTransfersByBlock");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("block_number_or_hash", Moralis.EvmApi.Client.ClientUtils.ParameterToString(blockNumberOrHash)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/block/{block_number_or_hash}/nft/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersByBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersByBlockAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTTransfersByBlockWithHttpInfoAsync(blockNumberOrHash, chain, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTTransfersByBlockWithHttpInfoAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockNumberOrHash' is set
            if (blockNumberOrHash == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'blockNumberOrHash' when calling NFTApi->GetNFTTransfersByBlock");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("block_number_or_hash", Moralis.EvmApi.Client.ClientUtils.ParameterToString(blockNumberOrHash)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/block/{block_number_or_hash}/nft/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersByBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTTransfersFromToBlock(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTTransfersFromToBlockWithHttpInfo(chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTTransfersFromToBlockWithHttpInfo(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/nft/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersFromToBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersFromToBlockAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTTransfersFromToBlockWithHttpInfoAsync(chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTTransfersFromToBlockWithHttpInfoAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/nft/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersFromToBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftWalletCollections</returns>
        public NftWalletCollections GetWalletNFTCollections(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftWalletCollections> localVarResponse = GetWalletNFTCollectionsWithHttpInfo(address, chain, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftWalletCollections</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftWalletCollections> GetWalletNFTCollectionsWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetWalletNFTCollections");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftWalletCollections>("/{address}/nft/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftWalletCollections</returns>
        public async System.Threading.Tasks.Task<NftWalletCollections> GetWalletNFTCollectionsAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftWalletCollections> localVarResponse = await GetWalletNFTCollectionsWithHttpInfoAsync(address, chain, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftWalletCollections)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftWalletCollections>> GetWalletNFTCollectionsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetWalletNFTCollections");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftWalletCollections>("/{address}/nft/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetWalletNFTTransfers(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetWalletNFTTransfersWithHttpInfo(address, chain, format, direction, fromBlock, toBlock, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetWalletNFTTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetWalletNFTTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/{address}/nft/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetWalletNFTTransfersAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetWalletNFTTransfersWithHttpInfoAsync(address, chain, format, direction, fromBlock, toBlock, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetWalletNFTTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetWalletNFTTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/{address}/nft/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>NftOwnerCollection</returns>
        public NftOwnerCollection GetWalletNFTs(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = GetWalletNFTsWithHttpInfo(address, chain, format, limit, disableTotal, tokenAddresses, cursor, normalizeMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <returns>ApiResponse of NftOwnerCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> GetWalletNFTsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetWalletNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (tokenAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "token_addresses", tokenAddresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftOwnerCollection>("/{address}/nft", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftOwnerCollection</returns>
        public async System.Threading.Tasks.Task<NftOwnerCollection> GetWalletNFTsAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection> localVarResponse = await GetWalletNFTsWithHttpInfoAsync(address, chain, format, limit, disableTotal, tokenAddresses, cursor, normalizeMetadata, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs by wallet Get NFTs owned by a given address. * The response will include status [SYNCED/SYNCING] based on the contracts being indexed. * Use the token_address param to get results for a specific contract only * Note that results will include all indexed NFTs * Any request that includes the token_address param will start the indexing process for that NFT collection the very first time it is requested.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned? (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftOwnerCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftOwnerCollection>> GetWalletNFTsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), List<string> tokenAddresses = default(List<string>), string cursor = default(string), bool? normalizeMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->GetWalletNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (tokenAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "token_addresses", tokenAddresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (normalizeMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "normalizeMetadata", normalizeMetadata));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftOwnerCollection>("/{address}/nft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resync NFT metadata Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <returns>MetadataResync</returns>
        public MetadataResync ReSyncMetadata(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<MetadataResync> localVarResponse = ReSyncMetadataWithHttpInfo(address, tokenId, chain, flag, mode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resync NFT metadata Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <returns>ApiResponse of MetadataResync</returns>
        public Moralis.EvmApi.Client.ApiResponse<MetadataResync> ReSyncMetadataWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->ReSyncMetadata");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->ReSyncMetadata");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (flag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "flag", flag));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MetadataResync>("/nft/{address}/{token_id}/metadata/resync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReSyncMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resync NFT metadata Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetadataResync</returns>
        public async System.Threading.Tasks.Task<MetadataResync> ReSyncMetadataAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<MetadataResync> localVarResponse = await ReSyncMetadataWithHttpInfoAsync(address, tokenId, chain, flag, mode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resync NFT metadata Resync the metadata for an NFT * The metadata flag will request the NFT&#39;s metadata from an already existing token_uri * The uri (default) flag will fetch the latest token_uri from the given NFT contract address. In sync mode the metadata will also be fetched * The sync mode will make the endpoint synchronous so it will wait for the task to be completed before responding * The async mode (default) will make the endpoint asynchronous so we will wait for the task to be completed before responding 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="flag">The type of resync to operate (optional, default to uri)</param>
        /// <param name="mode">To define the behaviour of the endpoint (optional, default to async)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetadataResync)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<MetadataResync>> ReSyncMetadataWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string flag = default(string), string mode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->ReSyncMetadata");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling NFTApi->ReSyncMetadata");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (flag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "flag", flag));
            }
            if (mode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "mode", mode));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MetadataResync>("/nft/{address}/{token_id}/metadata/resync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReSyncMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>NftMetadataCollection</returns>
        public NftMetadataCollection SearchNFTs(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection> localVarResponse = SearchNFTsWithHttpInfo(q, chain, format, filter, fromBlock, toBlock, fromDate, toDate, addresses, cursor, limit, disableTotal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of NftMetadataCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection> SearchNFTsWithHttpInfo(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'q' when calling NFTApi->SearchNFTs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (addresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "addresses", addresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftMetadataCollection>("/nft/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftMetadataCollection</returns>
        public async System.Threading.Tasks.Task<NftMetadataCollection> SearchNFTsAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection> localVarResponse = await SearchNFTsWithHttpInfoAsync(q, chain, format, filter, fromBlock, toBlock, fromDate, toDate, addresses, cursor, limit, disableTotal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search NFTs Get NFTs that match a given metadata search query.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The search string</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="filter">What fields the search should match on. To look into the entire metadata set the value to &#39;global&#39;. To have a better response time you can look into a specific field like name (optional, default to global)</param>
        /// <param name="fromBlock">The minimum block number from which to start the search * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to end the search * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from which to start the search (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get search results up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="addresses">The addresses to get metadata for (optional)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftMetadataCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftMetadataCollection>> SearchNFTsWithHttpInfoAsync(string q, ChainList? chain = default(ChainList?), string format = default(string), string filter = default(string), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), List<string> addresses = default(List<string>), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'q' when calling NFTApi->SearchNFTs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (addresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "addresses", addresses));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftMetadataCollection>("/nft/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNFTs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns></returns>
        public void SyncNFTContract(string address, ChainList? chain = default(ChainList?))
        {
            SyncNFTContractWithHttpInfo(address, chain);
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Moralis.EvmApi.Client.ApiResponse<Object> SyncNFTContractWithHttpInfo(string address, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->SyncNFTContract");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/nft/{address}/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncNFTContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncNFTContractAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SyncNFTContractWithHttpInfoAsync(address, chain, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Object>> SyncNFTContractWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling NFTApi->SyncNFTContract");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/nft/{address}/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncNFTContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
