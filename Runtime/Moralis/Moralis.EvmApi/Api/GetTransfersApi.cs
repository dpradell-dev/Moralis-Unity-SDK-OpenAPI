/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetTransfersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTContractTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTContractTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTTransfers(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTTransfersWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTTransfersByBlock(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTTransfersByBlockWithHttpInfo(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetNFTTransfersFromToBlock(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetNFTTransfersFromToBlockWithHttpInfo(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        NftTransferCollection GetWalletNFTTransfers(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        ApiResponse<NftTransferCollection> GetWalletNFTTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetTransfersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTContractTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by contract
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs for a given contract and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTContractTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by token ID
        /// </summary>
        /// <remarks>
        /// Get transfers of an NFT given a contract address and token ID.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTTransfersWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersByBlockAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given a block number or block hash.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTTransfersByBlockWithHttpInfoAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersFromToBlockAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers from a block to a block
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs from a block number to a block number.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetNFTTransfersFromToBlockWithHttpInfoAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        System.Threading.Tasks.Task<NftTransferCollection> GetWalletNFTTransfersAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT transfers by wallet
        /// </summary>
        /// <remarks>
        /// Get transfers of NFTs given the wallet and other parameters.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftTransferCollection>> GetWalletNFTTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetTransfersApi : IGetTransfersApiSync, IGetTransfersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetTransfersApi : IDisposable, IGetTransfersApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GetTransfersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GetTransfersApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GetTransfersApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetTransfersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetTransfersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetTransfersApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransfersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GetTransfersApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTContractTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTContractTransfersWithHttpInfo(address, chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTContractTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetTransfersApi->GetNFTContractTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/nft/{address}/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTContractTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTContractTransfersWithHttpInfoAsync(address, chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by contract Get transfers of NFTs for a given contract and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from where to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from where to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The date from where to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get transfers up until this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTContractTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetTransfersApi->GetNFTContractTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/nft/{address}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTTransfers(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTTransfersWithHttpInfo(address, tokenId, chain, format, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTTransfersWithHttpInfo(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetTransfersApi->GetNFTTransfers");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling GetTransfersApi->GetNFTTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/nft/{address}/{token_id}/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTTransfersWithHttpInfoAsync(address, tokenId, chain, format, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by token ID Get transfers of an NFT given a contract address and token ID.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="tokenId">The ID of the token</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTTransfersWithHttpInfoAsync(string address, string tokenId, ChainList? chain = default(ChainList?), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetTransfersApi->GetNFTTransfers");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'tokenId' when calling GetTransfersApi->GetNFTTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token_id", Moralis.EvmApi.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/nft/{address}/{token_id}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTTransfersByBlock(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTTransfersByBlockWithHttpInfo(blockNumberOrHash, chain, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTTransfersByBlockWithHttpInfo(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'blockNumberOrHash' is set
            if (blockNumberOrHash == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'blockNumberOrHash' when calling GetTransfersApi->GetNFTTransfersByBlock");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("block_number_or_hash", Moralis.EvmApi.Client.ClientUtils.ParameterToString(blockNumberOrHash)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/block/{block_number_or_hash}/nft/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersByBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersByBlockAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTTransfersByBlockWithHttpInfoAsync(blockNumberOrHash, chain, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by block Get transfers of NFTs given a block number or block hash.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumberOrHash">The block number or block hash</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional, default to 100)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTTransfersByBlockWithHttpInfoAsync(string blockNumberOrHash, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockNumberOrHash' is set
            if (blockNumberOrHash == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'blockNumberOrHash' when calling GetTransfersApi->GetNFTTransfersByBlock");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("block_number_or_hash", Moralis.EvmApi.Client.ClientUtils.ParameterToString(blockNumberOrHash)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/block/{block_number_or_hash}/nft/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersByBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetNFTTransfersFromToBlock(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetNFTTransfersFromToBlockWithHttpInfo(chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetNFTTransfersFromToBlockWithHttpInfo(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/nft/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersFromToBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetNFTTransfersFromToBlockAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetNFTTransfersFromToBlockWithHttpInfoAsync(chain, fromBlock, toBlock, fromDate, toDate, format, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers from a block to a block Get transfers of NFTs from a block number to a block number.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (for getting the next page)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetNFTTransfersFromToBlockWithHttpInfoAsync(ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), string format = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/nft/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTransfersFromToBlock", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftTransferCollection</returns>
        public NftTransferCollection GetWalletNFTTransfers(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = GetWalletNFTTransfersWithHttpInfo(address, chain, format, direction, fromBlock, toBlock, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftTransferCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> GetWalletNFTTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetTransfersApi->GetWalletNFTTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftTransferCollection>("/{address}/nft/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftTransferCollection</returns>
        public async System.Threading.Tasks.Task<NftTransferCollection> GetWalletNFTTransfersAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftTransferCollection> localVarResponse = await GetWalletNFTTransfersWithHttpInfoAsync(address, chain, format, direction, fromBlock, toBlock, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT transfers by wallet Get transfers of NFTs given the wallet and other parameters.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the sender or recipient of the transfers</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="format">The format of the token ID (optional, default to decimal)</param>
        /// <param name="direction">The transfer direction (optional, default to both)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">To get the reserves at this block number (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftTransferCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftTransferCollection>> GetWalletNFTTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string format = default(string), string direction = default(string), int? fromBlock = default(int?), string toBlock = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetTransfersApi->GetWalletNFTTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftTransferCollection>("/{address}/nft/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
