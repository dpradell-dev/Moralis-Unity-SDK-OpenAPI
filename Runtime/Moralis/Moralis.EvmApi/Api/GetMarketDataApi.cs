/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetMarketDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>Trade</returns>
        Trade GetNFTLowestPrice(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string));

        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>ApiResponse of Trade</returns>
        ApiResponse<Trade> GetNFTLowestPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string));
        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>TradeCollection</returns>
        TradeCollection GetNFTTrades(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));

        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of TradeCollection</returns>
        ApiResponse<TradeCollection> GetNFTTradesWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?));
        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>Erc20Price</returns>
        Erc20Price GetTokenPrice(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?));

        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>ApiResponse of Erc20Price</returns>
        ApiResponse<Erc20Price> GetTokenPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetMarketDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Trade</returns>
        System.Threading.Tasks.Task<Trade> GetNFTLowestPriceAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT lowest price
        /// </summary>
        /// <remarks>
        /// Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Trade)</returns>
        System.Threading.Tasks.Task<ApiResponse<Trade>> GetNFTLowestPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeCollection</returns>
        System.Threading.Tasks.Task<TradeCollection> GetNFTTradesAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT trades by marketplace
        /// </summary>
        /// <remarks>
        /// Get trades of NFTs for a given contract and marketplace.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TradeCollection>> GetNFTTradesWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20Price</returns>
        System.Threading.Tasks.Task<Erc20Price> GetTokenPriceAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20Price)</returns>
        System.Threading.Tasks.Task<ApiResponse<Erc20Price>> GetTokenPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetMarketDataApi : IGetMarketDataApiSync, IGetMarketDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetMarketDataApi : IDisposable, IGetMarketDataApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GetMarketDataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GetMarketDataApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GetMarketDataApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetMarketDataApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetMarketDataApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetMarketDataApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetMarketDataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GetMarketDataApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>Trade</returns>
        public Trade GetNFTLowestPrice(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<Trade> localVarResponse = GetNFTLowestPriceWithHttpInfo(address, chain, days, marketplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <returns>ApiResponse of Trade</returns>
        public Moralis.EvmApi.Client.ApiResponse<Trade> GetNFTLowestPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetMarketDataApi->GetNFTLowestPrice");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (days != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "days", days));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Trade>("/nft/{address}/lowestprice", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTLowestPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Trade</returns>
        public async System.Threading.Tasks.Task<Trade> GetNFTLowestPriceAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Trade> localVarResponse = await GetNFTLowestPriceWithHttpInfoAsync(address, chain, days, marketplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT lowest price Get the lowest executed price for an NFT contract for the last x days (only trades paid in ETH).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="days">The number of days to look back to find the lowest price If not provided 7 days will be the default  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Trade)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Trade>> GetNFTLowestPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? days = default(int?), string marketplace = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetMarketDataApi->GetNFTLowestPrice");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (days != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "days", days));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Trade>("/nft/{address}/lowestprice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTLowestPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>TradeCollection</returns>
        public TradeCollection GetNFTTrades(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            Moralis.EvmApi.Client.ApiResponse<TradeCollection> localVarResponse = GetNFTTradesWithHttpInfo(address, chain, fromBlock, toBlock, fromDate, toDate, marketplace, cursor, limit, disableTotal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <returns>ApiResponse of TradeCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<TradeCollection> GetNFTTradesWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetMarketDataApi->GetNFTTrades");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TradeCollection>("/nft/{address}/trades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TradeCollection</returns>
        public async System.Threading.Tasks.Task<TradeCollection> GetNFTTradesAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<TradeCollection> localVarResponse = await GetNFTTradesWithHttpInfoAsync(address, chain, fromBlock, toBlock, fromDate, toDate, marketplace, cursor, limit, disableTotal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT trades by marketplace Get trades of NFTs for a given contract and marketplace.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The block number to get the trades from (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">The end date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="marketplace">Marketplace from which to get the trades (only OpenSea is supported at the moment) (optional, default to opensea)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TradeCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<TradeCollection>> GetNFTTradesWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string marketplace = default(string), string cursor = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetMarketDataApi->GetNFTTrades");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (marketplace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "marketplace", marketplace));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TradeCollection>("/nft/{address}/trades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTTrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>Erc20Price</returns>
        public Erc20Price GetTokenPrice(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20Price> localVarResponse = GetTokenPriceWithHttpInfo(address, chain, exchange, toBlock);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>ApiResponse of Erc20Price</returns>
        public Moralis.EvmApi.Client.ApiResponse<Erc20Price> GetTokenPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetMarketDataApi->GetTokenPrice");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (exchange != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "exchange", exchange));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Erc20Price>("/erc20/{address}/price", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20Price</returns>
        public async System.Threading.Tasks.Task<Erc20Price> GetTokenPriceAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20Price> localVarResponse = await GetTokenPriceWithHttpInfoAsync(address, chain, exchange, toBlock, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20Price)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Erc20Price>> GetTokenPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetMarketDataApi->GetTokenPrice");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (exchange != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "exchange", exchange));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Erc20Price>("/erc20/{address}/price", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
