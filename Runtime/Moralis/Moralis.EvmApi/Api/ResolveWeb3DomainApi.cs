/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResolveWeb3DomainApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Resolve ENS domain
        /// </summary>
        /// <remarks>
        /// Reverse resolve a given ETH address to its ENS domain.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <returns>Ens</returns>
        Ens ResolveAddress(string address);

        /// <summary>
        /// Resolve ENS domain
        /// </summary>
        /// <remarks>
        /// Reverse resolve a given ETH address to its ENS domain.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <returns>ApiResponse of Ens</returns>
        ApiResponse<Ens> ResolveAddressWithHttpInfo(string address);
        /// <summary>
        /// Resolve Unstoppable domain
        /// </summary>
        /// <remarks>
        /// Resolve a specific Unstoppable domain to its address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <returns>Resolve</returns>
        Resolve ResolveDomain(string domain, string currency = default(string));

        /// <summary>
        /// Resolve Unstoppable domain
        /// </summary>
        /// <remarks>
        /// Resolve a specific Unstoppable domain to its address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <returns>ApiResponse of Resolve</returns>
        ApiResponse<Resolve> ResolveDomainWithHttpInfo(string domain, string currency = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResolveWeb3DomainApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Resolve ENS domain
        /// </summary>
        /// <remarks>
        /// Reverse resolve a given ETH address to its ENS domain.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ens</returns>
        System.Threading.Tasks.Task<Ens> ResolveAddressAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resolve ENS domain
        /// </summary>
        /// <remarks>
        /// Reverse resolve a given ETH address to its ENS domain.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ens)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ens>> ResolveAddressWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resolve Unstoppable domain
        /// </summary>
        /// <remarks>
        /// Resolve a specific Unstoppable domain to its address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Resolve</returns>
        System.Threading.Tasks.Task<Resolve> ResolveDomainAsync(string domain, string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resolve Unstoppable domain
        /// </summary>
        /// <remarks>
        /// Resolve a specific Unstoppable domain to its address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Resolve)</returns>
        System.Threading.Tasks.Task<ApiResponse<Resolve>> ResolveDomainWithHttpInfoAsync(string domain, string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResolveWeb3DomainApi : IResolveWeb3DomainApiSync, IResolveWeb3DomainApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResolveWeb3DomainApi : IDisposable, IResolveWeb3DomainApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ResolveWeb3DomainApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ResolveWeb3DomainApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ResolveWeb3DomainApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ResolveWeb3DomainApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ResolveWeb3DomainApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ResolveWeb3DomainApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveWeb3DomainApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ResolveWeb3DomainApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Resolve ENS domain Reverse resolve a given ETH address to its ENS domain.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <returns>Ens</returns>
        public Ens ResolveAddress(string address)
        {
            Moralis.EvmApi.Client.ApiResponse<Ens> localVarResponse = ResolveAddressWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve ENS domain Reverse resolve a given ETH address to its ENS domain.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <returns>ApiResponse of Ens</returns>
        public Moralis.EvmApi.Client.ApiResponse<Ens> ResolveAddressWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling ResolveWeb3DomainApi->ResolveAddress");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Ens>("/resolve/{address}/reverse", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve ENS domain Reverse resolve a given ETH address to its ENS domain.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ens</returns>
        public async System.Threading.Tasks.Task<Ens> ResolveAddressAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Ens> localVarResponse = await ResolveAddressWithHttpInfoAsync(address, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve ENS domain Reverse resolve a given ETH address to its ENS domain.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address to be resolved</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ens)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Ens>> ResolveAddressWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling ResolveWeb3DomainApi->ResolveAddress");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Ens>("/resolve/{address}/reverse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Unstoppable domain Resolve a specific Unstoppable domain to its address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <returns>Resolve</returns>
        public Resolve ResolveDomain(string domain, string currency = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<Resolve> localVarResponse = ResolveDomainWithHttpInfo(domain, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve Unstoppable domain Resolve a specific Unstoppable domain to its address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <returns>ApiResponse of Resolve</returns>
        public Moralis.EvmApi.Client.ApiResponse<Resolve> ResolveDomainWithHttpInfo(string domain, string currency = default(string))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'domain' when calling ResolveWeb3DomainApi->ResolveDomain");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("domain", Moralis.EvmApi.Client.ClientUtils.ParameterToString(domain)); // path parameter
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Resolve>("/resolve/{domain}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveDomain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve Unstoppable domain Resolve a specific Unstoppable domain to its address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Resolve</returns>
        public async System.Threading.Tasks.Task<Resolve> ResolveDomainAsync(string domain, string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Resolve> localVarResponse = await ResolveDomainWithHttpInfoAsync(domain, currency, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve Unstoppable domain Resolve a specific Unstoppable domain to its address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain to be resolved</param>
        /// <param name="currency">The currency to query (optional, default to eth)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Resolve)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Resolve>> ResolveDomainWithHttpInfoAsync(string domain, string currency = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'domain' when calling ResolveWeb3DomainApi->ResolveDomain");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("domain", Moralis.EvmApi.Client.ClientUtils.ParameterToString(domain)); // path parameter
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Resolve>("/resolve/{domain}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResolveDomain", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
