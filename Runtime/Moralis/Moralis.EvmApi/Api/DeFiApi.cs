/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeFiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get DEX token pair address
        /// </summary>
        /// <remarks>
        /// Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>ReservesCollection</returns>
        ReservesCollection GetPairAddress(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string));

        /// <summary>
        /// Get DEX token pair address
        /// </summary>
        /// <remarks>
        /// Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>ApiResponse of ReservesCollection</returns>
        ApiResponse<ReservesCollection> GetPairAddressWithHttpInfo(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string));
        /// <summary>
        /// Get DEX token pair reserves
        /// </summary>
        /// <remarks>
        /// Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>GetPairReserves200Response</returns>
        GetPairReserves200Response GetPairReserves(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string));

        /// <summary>
        /// Get DEX token pair reserves
        /// </summary>
        /// <remarks>
        /// Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>ApiResponse of GetPairReserves200Response</returns>
        ApiResponse<GetPairReserves200Response> GetPairReservesWithHttpInfo(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeFiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get DEX token pair address
        /// </summary>
        /// <remarks>
        /// Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReservesCollection</returns>
        System.Threading.Tasks.Task<ReservesCollection> GetPairAddressAsync(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get DEX token pair address
        /// </summary>
        /// <remarks>
        /// Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReservesCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReservesCollection>> GetPairAddressWithHttpInfoAsync(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get DEX token pair reserves
        /// </summary>
        /// <remarks>
        /// Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPairReserves200Response</returns>
        System.Threading.Tasks.Task<GetPairReserves200Response> GetPairReservesAsync(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get DEX token pair reserves
        /// </summary>
        /// <remarks>
        /// Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPairReserves200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPairReserves200Response>> GetPairReservesWithHttpInfoAsync(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeFiApi : IDeFiApiSync, IDeFiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeFiApi : IDisposable, IDeFiApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DeFiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DeFiApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DeFiApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeFiApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeFiApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DeFiApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeFiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DeFiApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get DEX token pair address Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>ReservesCollection</returns>
        public ReservesCollection GetPairAddress(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<ReservesCollection> localVarResponse = GetPairAddressWithHttpInfo(exchange, token0Address, token1Address, chain, toBlock, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DEX token pair address Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>ApiResponse of ReservesCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<ReservesCollection> GetPairAddressWithHttpInfo(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string))
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'exchange' when calling DeFiApi->GetPairAddress");

            // verify the required parameter 'token0Address' is set
            if (token0Address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'token0Address' when calling DeFiApi->GetPairAddress");

            // verify the required parameter 'token1Address' is set
            if (token1Address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'token1Address' when calling DeFiApi->GetPairAddress");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token0_address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(token0Address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token1_address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(token1Address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "exchange", exchange));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReservesCollection>("/{token0_address}/{token1_address}/pairAddress", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPairAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DEX token pair address Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReservesCollection</returns>
        public async System.Threading.Tasks.Task<ReservesCollection> GetPairAddressAsync(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<ReservesCollection> localVarResponse = await GetPairAddressWithHttpInfoAsync(exchange, token0Address, token1Address, chain, toBlock, toDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DEX token pair address Fetch the pair data of the provided token0+token1 combination. The token0 and token1 options are interchangable (ie. there is no different outcome in \&quot;token0&#x3D;WETH and token1&#x3D;USDT\&quot; or \&quot;token0&#x3D;USDT and token1&#x3D;WETH\&quot;) 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchange">The factory name or address of the token exchange</param>
        /// <param name="token0Address">The token0 address</param>
        /// <param name="token1Address">The token1 address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReservesCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<ReservesCollection>> GetPairAddressWithHttpInfoAsync(string exchange, string token0Address, string token1Address, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'exchange' when calling DeFiApi->GetPairAddress");

            // verify the required parameter 'token0Address' is set
            if (token0Address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'token0Address' when calling DeFiApi->GetPairAddress");

            // verify the required parameter 'token1Address' is set
            if (token1Address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'token1Address' when calling DeFiApi->GetPairAddress");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token0_address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(token0Address)); // path parameter
            localVarRequestOptions.PathParameters.Add("token1_address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(token1Address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "exchange", exchange));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ReservesCollection>("/{token0_address}/{token1_address}/pairAddress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPairAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DEX token pair reserves Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>GetPairReserves200Response</returns>
        public GetPairReserves200Response GetPairReserves(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<GetPairReserves200Response> localVarResponse = GetPairReservesWithHttpInfo(pairAddress, chain, toBlock, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DEX token pair reserves Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <returns>ApiResponse of GetPairReserves200Response</returns>
        public Moralis.EvmApi.Client.ApiResponse<GetPairReserves200Response> GetPairReservesWithHttpInfo(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string))
        {
            // verify the required parameter 'pairAddress' is set
            if (pairAddress == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'pairAddress' when calling DeFiApi->GetPairReserves");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pair_address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(pairAddress)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPairReserves200Response>("/{pair_address}/reserves", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPairReserves", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DEX token pair reserves Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPairReserves200Response</returns>
        public async System.Threading.Tasks.Task<GetPairReserves200Response> GetPairReservesAsync(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<GetPairReserves200Response> localVarResponse = await GetPairReservesWithHttpInfoAsync(pairAddress, chain, toBlock, toDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DEX token pair reserves Get the liquidity reserves for a given pair address. Only Uniswap V2 based exchanges supported at the moment.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pairAddress">The liquidity pair address</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number to get the reserves from (optional)</param>
        /// <param name="toDate">Get the reserves up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPairReserves200Response)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<GetPairReserves200Response>> GetPairReservesWithHttpInfoAsync(string pairAddress, ChainList? chain = default(ChainList?), string toBlock = default(string), string toDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pairAddress' is set
            if (pairAddress == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'pairAddress' when calling DeFiApi->GetPairReserves");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("pair_address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(pairAddress)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPairReserves200Response>("/{pair_address}/reserves", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPairReserves", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
