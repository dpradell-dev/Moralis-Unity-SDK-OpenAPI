/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get ERC20 token allowance
        /// </summary>
        /// <remarks>
        /// Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>Erc20Allowance</returns>
        Erc20Allowance GetTokenAllowance(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Get ERC20 token allowance
        /// </summary>
        /// <remarks>
        /// Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of Erc20Allowance</returns>
        ApiResponse<Erc20Allowance> GetTokenAllowanceWithHttpInfo(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?));
        /// <summary>
        /// Get ERC20 token metadata by contract
        /// </summary>
        /// <remarks>
        /// Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>List&lt;Erc20Metadata&gt;</returns>
        List<Erc20Metadata> GetTokenMetadata(List<string> addresses, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Get ERC20 token metadata by contract
        /// </summary>
        /// <remarks>
        /// Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of List&lt;Erc20Metadata&gt;</returns>
        ApiResponse<List<Erc20Metadata>> GetTokenMetadataWithHttpInfo(List<string> addresses, ChainList? chain = default(ChainList?));
        /// <summary>
        /// Get ERC20 token metadata by symbols
        /// </summary>
        /// <remarks>
        /// Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>List&lt;Erc20Metadata&gt;</returns>
        List<Erc20Metadata> GetTokenMetadataBySymbol(List<string> symbols, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Get ERC20 token metadata by symbols
        /// </summary>
        /// <remarks>
        /// Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of List&lt;Erc20Metadata&gt;</returns>
        ApiResponse<List<Erc20Metadata>> GetTokenMetadataBySymbolWithHttpInfo(List<string> symbols, ChainList? chain = default(ChainList?));
        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>Erc20Price</returns>
        Erc20Price GetTokenPrice(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?));

        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>ApiResponse of Erc20Price</returns>
        ApiResponse<Erc20Price> GetTokenPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?));
        /// <summary>
        /// Get ERC20 token transactions by contract
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>Erc20TransactionCollection</returns>
        Erc20TransactionCollection GetTokenTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get ERC20 token transactions by contract
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of Erc20TransactionCollection</returns>
        ApiResponse<Erc20TransactionCollection> GetTokenTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Get ERC20 token balance by wallet
        /// </summary>
        /// <remarks>
        /// Get token balances for a specific wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <returns>List&lt;Erc20TokenBalance&gt;</returns>
        List<Erc20TokenBalance> GetWalletTokenBalances(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>));

        /// <summary>
        /// Get ERC20 token balance by wallet
        /// </summary>
        /// <remarks>
        /// Get token balances for a specific wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <returns>ApiResponse of List&lt;Erc20TokenBalance&gt;</returns>
        ApiResponse<List<Erc20TokenBalance>> GetWalletTokenBalancesWithHttpInfo(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>));
        /// <summary>
        /// Get ERC20 token transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>Erc20TransactionCollection</returns>
        Erc20TransactionCollection GetWalletTokenTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get ERC20 token transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of Erc20TransactionCollection</returns>
        ApiResponse<Erc20TransactionCollection> GetWalletTokenTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get ERC20 token allowance
        /// </summary>
        /// <remarks>
        /// Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20Allowance</returns>
        System.Threading.Tasks.Task<Erc20Allowance> GetTokenAllowanceAsync(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token allowance
        /// </summary>
        /// <remarks>
        /// Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20Allowance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Erc20Allowance>> GetTokenAllowanceWithHttpInfoAsync(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token metadata by contract
        /// </summary>
        /// <remarks>
        /// Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Erc20Metadata&gt;</returns>
        System.Threading.Tasks.Task<List<Erc20Metadata>> GetTokenMetadataAsync(List<string> addresses, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token metadata by contract
        /// </summary>
        /// <remarks>
        /// Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Erc20Metadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Erc20Metadata>>> GetTokenMetadataWithHttpInfoAsync(List<string> addresses, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token metadata by symbols
        /// </summary>
        /// <remarks>
        /// Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Erc20Metadata&gt;</returns>
        System.Threading.Tasks.Task<List<Erc20Metadata>> GetTokenMetadataBySymbolAsync(List<string> symbols, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token metadata by symbols
        /// </summary>
        /// <remarks>
        /// Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Erc20Metadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Erc20Metadata>>> GetTokenMetadataBySymbolWithHttpInfoAsync(List<string> symbols, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20Price</returns>
        System.Threading.Tasks.Task<Erc20Price> GetTokenPriceAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token price
        /// </summary>
        /// <remarks>
        /// Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20Price)</returns>
        System.Threading.Tasks.Task<ApiResponse<Erc20Price>> GetTokenPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token transactions by contract
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20TransactionCollection</returns>
        System.Threading.Tasks.Task<Erc20TransactionCollection> GetTokenTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token transactions by contract
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20TransactionCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Erc20TransactionCollection>> GetTokenTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token balance by wallet
        /// </summary>
        /// <remarks>
        /// Get token balances for a specific wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Erc20TokenBalance&gt;</returns>
        System.Threading.Tasks.Task<List<Erc20TokenBalance>> GetWalletTokenBalancesAsync(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token balance by wallet
        /// </summary>
        /// <remarks>
        /// Get token balances for a specific wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Erc20TokenBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Erc20TokenBalance>>> GetWalletTokenBalancesWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get ERC20 token transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20TransactionCollection</returns>
        System.Threading.Tasks.Task<Erc20TransactionCollection> GetWalletTokenTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get ERC20 token transactions by wallet
        /// </summary>
        /// <remarks>
        /// Get ERC20 token transactions ordered by block number in descending order.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20TransactionCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<Erc20TransactionCollection>> GetWalletTokenTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITokenApi : ITokenApiSync, ITokenApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TokenApi : IDisposable, ITokenApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TokenApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TokenApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TokenApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TokenApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TokenApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TokenApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TokenApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get ERC20 token allowance Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>Erc20Allowance</returns>
        public Erc20Allowance GetTokenAllowance(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20Allowance> localVarResponse = GetTokenAllowanceWithHttpInfo(address, ownerAddress, spenderAddress, chain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token allowance Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of Erc20Allowance</returns>
        public Moralis.EvmApi.Client.ApiResponse<Erc20Allowance> GetTokenAllowanceWithHttpInfo(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetTokenAllowance");

            // verify the required parameter 'ownerAddress' is set
            if (ownerAddress == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'ownerAddress' when calling TokenApi->GetTokenAllowance");

            // verify the required parameter 'spenderAddress' is set
            if (spenderAddress == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'spenderAddress' when calling TokenApi->GetTokenAllowance");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "owner_address", ownerAddress));
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "spender_address", spenderAddress));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Erc20Allowance>("/erc20/{address}/allowance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenAllowance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token allowance Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20Allowance</returns>
        public async System.Threading.Tasks.Task<Erc20Allowance> GetTokenAllowanceAsync(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20Allowance> localVarResponse = await GetTokenAllowanceWithHttpInfoAsync(address, ownerAddress, spenderAddress, chain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token allowance Get the amount which the spender is allowed to withdraw on behalf of the owner.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="ownerAddress">The address of the token owner</param>
        /// <param name="spenderAddress">The address of the token spender</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20Allowance)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Erc20Allowance>> GetTokenAllowanceWithHttpInfoAsync(string address, string ownerAddress, string spenderAddress, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetTokenAllowance");

            // verify the required parameter 'ownerAddress' is set
            if (ownerAddress == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'ownerAddress' when calling TokenApi->GetTokenAllowance");

            // verify the required parameter 'spenderAddress' is set
            if (spenderAddress == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'spenderAddress' when calling TokenApi->GetTokenAllowance");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "owner_address", ownerAddress));
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "spender_address", spenderAddress));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Erc20Allowance>("/erc20/{address}/allowance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenAllowance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token metadata by contract Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>List&lt;Erc20Metadata&gt;</returns>
        public List<Erc20Metadata> GetTokenMetadata(List<string> addresses, ChainList? chain = default(ChainList?))
        {
            Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>> localVarResponse = GetTokenMetadataWithHttpInfo(addresses, chain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token metadata by contract Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of List&lt;Erc20Metadata&gt;</returns>
        public Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>> GetTokenMetadataWithHttpInfo(List<string> addresses, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'addresses' is set
            if (addresses == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'addresses' when calling TokenApi->GetTokenMetadata");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "addresses", addresses));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Erc20Metadata>>("/erc20/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token metadata by contract Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Erc20Metadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<Erc20Metadata>> GetTokenMetadataAsync(List<string> addresses, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>> localVarResponse = await GetTokenMetadataWithHttpInfoAsync(addresses, chain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token metadata by contract Get the metadata for a given token contract address (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses">The addresses to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Erc20Metadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>>> GetTokenMetadataWithHttpInfoAsync(List<string> addresses, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addresses' is set
            if (addresses == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'addresses' when calling TokenApi->GetTokenMetadata");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "addresses", addresses));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Erc20Metadata>>("/erc20/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token metadata by symbols Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>List&lt;Erc20Metadata&gt;</returns>
        public List<Erc20Metadata> GetTokenMetadataBySymbol(List<string> symbols, ChainList? chain = default(ChainList?))
        {
            Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>> localVarResponse = GetTokenMetadataBySymbolWithHttpInfo(symbols, chain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token metadata by symbols Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of List&lt;Erc20Metadata&gt;</returns>
        public Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>> GetTokenMetadataBySymbolWithHttpInfo(List<string> symbols, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'symbols' is set
            if (symbols == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'symbols' when calling TokenApi->GetTokenMetadataBySymbol");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "symbols", symbols));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Erc20Metadata>>("/erc20/metadata/symbols", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenMetadataBySymbol", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token metadata by symbols Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Erc20Metadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<Erc20Metadata>> GetTokenMetadataBySymbolAsync(List<string> symbols, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>> localVarResponse = await GetTokenMetadataBySymbolWithHttpInfoAsync(symbols, chain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token metadata by symbols Get the metadata for a list of token symbols (name, symbol, decimals, logo).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbols">The symbols to get metadata for</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Erc20Metadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<List<Erc20Metadata>>> GetTokenMetadataBySymbolWithHttpInfoAsync(List<string> symbols, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'symbols' is set
            if (symbols == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'symbols' when calling TokenApi->GetTokenMetadataBySymbol");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "symbols", symbols));

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Erc20Metadata>>("/erc20/metadata/symbols", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenMetadataBySymbol", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>Erc20Price</returns>
        public Erc20Price GetTokenPrice(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20Price> localVarResponse = GetTokenPriceWithHttpInfo(address, chain, exchange, toBlock);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <returns>ApiResponse of Erc20Price</returns>
        public Moralis.EvmApi.Client.ApiResponse<Erc20Price> GetTokenPriceWithHttpInfo(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetTokenPrice");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (exchange != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "exchange", exchange));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Erc20Price>("/erc20/{address}/price", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20Price</returns>
        public async System.Threading.Tasks.Task<Erc20Price> GetTokenPriceAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20Price> localVarResponse = await GetTokenPriceWithHttpInfoAsync(address, chain, exchange, toBlock, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token price Get the token price denominated in the blockchain&#39;s native token and USD.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="exchange">The factory name or address of the token exchange (optional)</param>
        /// <param name="toBlock">The block number from which the token price should be checked (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20Price)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Erc20Price>> GetTokenPriceWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string exchange = default(string), int? toBlock = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetTokenPrice");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (exchange != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "exchange", exchange));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Erc20Price>("/erc20/{address}/price", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenPrice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token transactions by contract Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>Erc20TransactionCollection</returns>
        public Erc20TransactionCollection GetTokenTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection> localVarResponse = GetTokenTransfersWithHttpInfo(address, chain, fromBlock, toBlock, fromDate, toDate, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token transactions by contract Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of Erc20TransactionCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection> GetTokenTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetTokenTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Erc20TransactionCollection>("/erc20/{address}/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token transactions by contract Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20TransactionCollection</returns>
        public async System.Threading.Tasks.Task<Erc20TransactionCollection> GetTokenTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection> localVarResponse = await GetTokenTransfersWithHttpInfoAsync(address, chain, fromBlock, toBlock, fromDate, toDate, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token transactions by contract Get ERC20 token transactions from a contract ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the token contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transfers * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transfers. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transfers (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transfers up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20TransactionCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection>> GetTokenTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetTokenTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Erc20TransactionCollection>("/erc20/{address}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token balance by wallet Get token balances for a specific wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <returns>List&lt;Erc20TokenBalance&gt;</returns>
        public List<Erc20TokenBalance> GetWalletTokenBalances(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>))
        {
            Moralis.EvmApi.Client.ApiResponse<List<Erc20TokenBalance>> localVarResponse = GetWalletTokenBalancesWithHttpInfo(address, chain, toBlock, tokenAddresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token balance by wallet Get token balances for a specific wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <returns>ApiResponse of List&lt;Erc20TokenBalance&gt;</returns>
        public Moralis.EvmApi.Client.ApiResponse<List<Erc20TokenBalance>> GetWalletTokenBalancesWithHttpInfo(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetWalletTokenBalances");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (tokenAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "token_addresses", tokenAddresses));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Erc20TokenBalance>>("/{address}/erc20", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletTokenBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token balance by wallet Get token balances for a specific wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Erc20TokenBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<Erc20TokenBalance>> GetWalletTokenBalancesAsync(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<List<Erc20TokenBalance>> localVarResponse = await GetWalletTokenBalancesWithHttpInfoAsync(address, chain, toBlock, tokenAddresses, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token balance by wallet Get token balances for a specific wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which token balances will be checked</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="toBlock">The block number from which the balances should be checked (optional)</param>
        /// <param name="tokenAddresses">The addresses to get balances for (optional) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Erc20TokenBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<List<Erc20TokenBalance>>> GetWalletTokenBalancesWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), decimal? toBlock = default(decimal?), List<string> tokenAddresses = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetWalletTokenBalances");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (tokenAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("multi", "token_addresses", tokenAddresses));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Erc20TokenBalance>>("/{address}/erc20", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletTokenBalances", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token transactions by wallet Get ERC20 token transactions ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>Erc20TransactionCollection</returns>
        public Erc20TransactionCollection GetWalletTokenTransfers(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection> localVarResponse = GetWalletTokenTransfersWithHttpInfo(address, chain, fromBlock, toBlock, fromDate, toDate, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token transactions by wallet Get ERC20 token transactions ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of Erc20TransactionCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection> GetWalletTokenTransfersWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetWalletTokenTransfers");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Erc20TransactionCollection>("/{address}/erc20/transfers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletTokenTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get ERC20 token transactions by wallet Get ERC20 token transactions ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Erc20TransactionCollection</returns>
        public async System.Threading.Tasks.Task<Erc20TransactionCollection> GetWalletTokenTransfersAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection> localVarResponse = await GetWalletTokenTransfersWithHttpInfoAsync(address, chain, fromBlock, toBlock, fromDate, toDate, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get ERC20 token transactions by wallet Get ERC20 token transactions ordered by block number in descending order.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the wallet</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the transactions * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the transactions. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the transactions (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the transactions up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Erc20TransactionCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Erc20TransactionCollection>> GetWalletTokenTransfersWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling TokenApi->GetWalletTokenTransfers");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Erc20TransactionCollection>("/{address}/erc20/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletTokenTransfers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
