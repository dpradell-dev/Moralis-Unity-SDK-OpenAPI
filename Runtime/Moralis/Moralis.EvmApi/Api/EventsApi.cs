/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get events by contract
        /// </summary>
        /// <remarks>
        /// Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <returns>GetContractEvents200Response</returns>
        GetContractEvents200Response GetContractEvents(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object));

        /// <summary>
        /// Get events by contract
        /// </summary>
        /// <remarks>
        /// Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <returns>ApiResponse of GetContractEvents200Response</returns>
        ApiResponse<GetContractEvents200Response> GetContractEventsWithHttpInfo(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object));
        /// <summary>
        /// Get logs by contract
        /// </summary>
        /// <remarks>
        /// Get the logs for a contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>LogCollection</returns>
        LogCollection GetContractLogs(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get logs by contract
        /// </summary>
        /// <remarks>
        /// Get the logs for a contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of LogCollection</returns>
        ApiResponse<LogCollection> GetContractLogsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get events by contract
        /// </summary>
        /// <remarks>
        /// Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractEvents200Response</returns>
        System.Threading.Tasks.Task<GetContractEvents200Response> GetContractEventsAsync(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get events by contract
        /// </summary>
        /// <remarks>
        /// Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractEvents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContractEvents200Response>> GetContractEventsWithHttpInfoAsync(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get logs by contract
        /// </summary>
        /// <remarks>
        /// Get the logs for a contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogCollection</returns>
        System.Threading.Tasks.Task<LogCollection> GetContractLogsAsync(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get logs by contract
        /// </summary>
        /// <remarks>
        /// Get the logs for a contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogCollection>> GetContractLogsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IDisposable, IEventsApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public EventsApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EventsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EventsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public EventsApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public EventsApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get events by contract Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <returns>GetContractEvents200Response</returns>
        public GetContractEvents200Response GetContractEvents(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object))
        {
            Moralis.EvmApi.Client.ApiResponse<GetContractEvents200Response> localVarResponse = GetContractEventsWithHttpInfo(address, topic, chain, fromBlock, toBlock, fromDate, toDate, offset, limit, disableTotal, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get events by contract Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <returns>ApiResponse of GetContractEvents200Response</returns>
        public Moralis.EvmApi.Client.ApiResponse<GetContractEvents200Response> GetContractEventsWithHttpInfo(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling EventsApi->GetContractEvents");

            // verify the required parameter 'topic' is set
            if (topic == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'topic' when calling EventsApi->GetContractEvents");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic", topic));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetContractEvents200Response>("/{address}/events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get events by contract Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContractEvents200Response</returns>
        public async System.Threading.Tasks.Task<GetContractEvents200Response> GetContractEventsAsync(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<GetContractEvents200Response> localVarResponse = await GetContractEventsWithHttpInfoAsync(address, topic, chain, fromBlock, toBlock, fromDate, toDate, offset, limit, disableTotal, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get events by contract Get events for a contract ordered by block number in descending order. [Try it with Swagger](https://deep-index.moralis.io/api-docs-2.1/#/Events/getContractEvents).
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="topic">The topic of the event</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs. * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used.  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used.  (optional)</param>
        /// <param name="offset">offset (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="body">ABI of the specific event (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContractEvents200Response)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<GetContractEvents200Response>> GetContractEventsWithHttpInfoAsync(string address, string topic, ChainList? chain = default(ChainList?), int? fromBlock = default(int?), int? toBlock = default(int?), string fromDate = default(string), string toDate = default(string), int? offset = default(int?), int? limit = default(int?), bool? disableTotal = default(bool?), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling EventsApi->GetContractEvents");

            // verify the required parameter 'topic' is set
            if (topic == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'topic' when calling EventsApi->GetContractEvents");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic", topic));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetContractEvents200Response>("/{address}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get logs by contract Get the logs for a contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>LogCollection</returns>
        public LogCollection GetContractLogs(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<LogCollection> localVarResponse = GetContractLogsWithHttpInfo(address, chain, blockNumber, fromBlock, toBlock, fromDate, toDate, topic0, topic1, topic2, topic3, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs by contract Get the logs for a contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of LogCollection</returns>
        public Moralis.EvmApi.Client.ApiResponse<LogCollection> GetContractLogsWithHttpInfo(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling EventsApi->GetContractLogs");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (blockNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "block_number", blockNumber));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (topic0 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic0", topic0));
            }
            if (topic1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic1", topic1));
            }
            if (topic2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic2", topic2));
            }
            if (topic3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic3", topic3));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LogCollection>("/{address}/logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get logs by contract Get the logs for a contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogCollection</returns>
        public async System.Threading.Tasks.Task<LogCollection> GetContractLogsAsync(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<LogCollection> localVarResponse = await GetContractLogsWithHttpInfoAsync(address, chain, blockNumber, fromBlock, toBlock, fromDate, toDate, topic0, topic1, topic2, topic3, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs by contract Get the logs for a contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="blockNumber">The block number * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromBlock">The minimum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="toBlock">The maximum block number from which to get the logs * Provide the param &#39;block_numer&#39; or (&#39;from_block&#39; and / or &#39;to_block&#39;) * If &#39;block_numer&#39; is provided in combination with &#39;from_block&#39; and / or &#39;to_block&#39;, &#39;block_number&#39; will will be used  (optional)</param>
        /// <param name="fromDate">The start date from which to get the logs (any format that is accepted by momentjs) * Provide the param &#39;from_block&#39; or &#39;from_date&#39; * If &#39;from_date&#39; and &#39;from_block&#39; are provided, &#39;from_block&#39; will be used. * If &#39;from_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="toDate">Get the logs up to this date (any format that is accepted by momentjs) * Provide the param &#39;to_block&#39; or &#39;to_date&#39; * If &#39;to_date&#39; and &#39;to_block&#39; are provided, &#39;to_block&#39; will be used. * If &#39;to_date&#39; and the block params are provided, the block params will be used. Please refer to the blocks params sections (block_number,from_block and to_block) on how to use them  (optional)</param>
        /// <param name="topic0">topic0 (optional)</param>
        /// <param name="topic1">topic1 (optional)</param>
        /// <param name="topic2">topic2 (optional)</param>
        /// <param name="topic3">topic3 (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogCollection)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<LogCollection>> GetContractLogsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), string blockNumber = default(string), string fromBlock = default(string), string toBlock = default(string), string fromDate = default(string), string toDate = default(string), string topic0 = default(string), string topic1 = default(string), string topic2 = default(string), string topic3 = default(string), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling EventsApi->GetContractLogs");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (blockNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "block_number", blockNumber));
            }
            if (fromBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_block", fromBlock));
            }
            if (toBlock != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_block", toBlock));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (topic0 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic0", topic0));
            }
            if (topic1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic1", topic1));
            }
            if (topic2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic2", topic2));
            }
            if (topic3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "topic3", topic3));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LogCollection>("/{address}/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
