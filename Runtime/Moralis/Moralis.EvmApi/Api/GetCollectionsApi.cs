/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Moralis.EvmApi.Client;
using Moralis.EvmApi.Model;

namespace Moralis.EvmApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetCollectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>NftContractMetadata</returns>
        NftContractMetadata GetNFTContractMetadata(string address, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of NftContractMetadata</returns>
        ApiResponse<NftContractMetadata> GetNFTContractMetadataWithHttpInfo(string address, ChainList? chain = default(ChainList?));
        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftWalletCollections</returns>
        NftWalletCollections GetWalletNFTCollections(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));

        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftWalletCollections</returns>
        ApiResponse<NftWalletCollections> GetWalletNFTCollectionsWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string));
        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns></returns>
        void SyncNFTContract(string address, ChainList? chain = default(ChainList?));

        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncNFTContractWithHttpInfo(string address, ChainList? chain = default(ChainList?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetCollectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftContractMetadata</returns>
        System.Threading.Tasks.Task<NftContractMetadata> GetNFTContractMetadataAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT collection metadata
        /// </summary>
        /// <remarks>
        /// Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftContractMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftContractMetadata>> GetNFTContractMetadataWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftWalletCollections</returns>
        System.Threading.Tasks.Task<NftWalletCollections> GetWalletNFTCollectionsAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFT collections by wallet
        /// </summary>
        /// <remarks>
        /// Get NFT collections owned by a given wallet address.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftWalletCollections)</returns>
        System.Threading.Tasks.Task<ApiResponse<NftWalletCollections>> GetWalletNFTCollectionsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncNFTContractAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resync NFT Contract
        /// </summary>
        /// <remarks>
        /// Initiates a sync of a previously non synced contract.
        /// </remarks>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncNFTContractWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetCollectionsApi : IGetCollectionsApiSync, IGetCollectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetCollectionsApi : IDisposable, IGetCollectionsApi
    {
        private Moralis.EvmApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GetCollectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GetCollectionsApi(string basePath)
        {
            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GetCollectionsApi(Moralis.EvmApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetCollectionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetCollectionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                new Moralis.EvmApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GetCollectionsApi(HttpClient client, Moralis.EvmApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Moralis.EvmApi.Client.Configuration.MergeConfigurations(
                Moralis.EvmApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Moralis.EvmApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetCollectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GetCollectionsApi(Moralis.EvmApi.Client.ISynchronousClient client, Moralis.EvmApi.Client.IAsynchronousClient asyncClient, Moralis.EvmApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Moralis.EvmApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Moralis.EvmApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Moralis.EvmApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Moralis.EvmApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Moralis.EvmApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moralis.EvmApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>NftContractMetadata</returns>
        public NftContractMetadata GetNFTContractMetadata(string address, ChainList? chain = default(ChainList?))
        {
            Moralis.EvmApi.Client.ApiResponse<NftContractMetadata> localVarResponse = GetNFTContractMetadataWithHttpInfo(address, chain);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of NftContractMetadata</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftContractMetadata> GetNFTContractMetadataWithHttpInfo(string address, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetCollectionsApi->GetNFTContractMetadata");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftContractMetadata>("/nft/{address}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftContractMetadata</returns>
        public async System.Threading.Tasks.Task<NftContractMetadata> GetNFTContractMetadataAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftContractMetadata> localVarResponse = await GetNFTContractMetadataWithHttpInfoAsync(address, chain, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collection metadata Get the collection / contract level metadata for a given contract (name, symbol, base token URI). * Requests for contract addresses not yet indexed will automatically start the indexing process for that NFT collection 
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftContractMetadata)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftContractMetadata>> GetNFTContractMetadataWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetCollectionsApi->GetNFTContractMetadata");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftContractMetadata>("/nft/{address}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNFTContractMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>NftWalletCollections</returns>
        public NftWalletCollections GetWalletNFTCollections(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            Moralis.EvmApi.Client.ApiResponse<NftWalletCollections> localVarResponse = GetWalletNFTCollectionsWithHttpInfo(address, chain, limit, disableTotal, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <returns>ApiResponse of NftWalletCollections</returns>
        public Moralis.EvmApi.Client.ApiResponse<NftWalletCollections> GetWalletNFTCollectionsWithHttpInfo(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetCollectionsApi->GetWalletNFTCollections");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NftWalletCollections>("/{address}/nft/collections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NftWalletCollections</returns>
        public async System.Threading.Tasks.Task<NftWalletCollections> GetWalletNFTCollectionsAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Moralis.EvmApi.Client.ApiResponse<NftWalletCollections> localVarResponse = await GetWalletNFTCollectionsWithHttpInfoAsync(address, chain, limit, disableTotal, cursor, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFT collections by wallet Get NFT collections owned by a given wallet address.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The wallet address of the owner of NFTs in the collections</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="limit">The desired page size of the result. (optional)</param>
        /// <param name="disableTotal">If the result should skip returning the total count (Improves performance). (optional, default to false)</param>
        /// <param name="cursor">The cursor returned in the previous response (used for getting the next page). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NftWalletCollections)</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<NftWalletCollections>> GetWalletNFTCollectionsWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), int? limit = default(int?), bool? disableTotal = default(bool?), string cursor = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetCollectionsApi->GetWalletNFTCollections");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (disableTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "disable_total", disableTotal));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NftWalletCollections>("/{address}/nft/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWalletNFTCollections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns></returns>
        public void SyncNFTContract(string address, ChainList? chain = default(ChainList?))
        {
            SyncNFTContractWithHttpInfo(address, chain);
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Moralis.EvmApi.Client.ApiResponse<Object> SyncNFTContractWithHttpInfo(string address, ChainList? chain = default(ChainList?))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetCollectionsApi->SyncNFTContract");

            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/nft/{address}/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncNFTContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncNFTContractAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SyncNFTContractWithHttpInfoAsync(address, chain, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resync NFT Contract Initiates a sync of a previously non synced contract.
        /// </summary>
        /// <exception cref="Moralis.EvmApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the NFT contract</param>
        /// <param name="chain">The chain to query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Moralis.EvmApi.Client.ApiResponse<Object>> SyncNFTContractWithHttpInfoAsync(string address, ChainList? chain = default(ChainList?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Moralis.EvmApi.Client.ApiException(400, "Missing required parameter 'address' when calling GetCollectionsApi->SyncNFTContract");


            Moralis.EvmApi.Client.RequestOptions localVarRequestOptions = new Moralis.EvmApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Moralis.EvmApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Moralis.EvmApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("address", Moralis.EvmApi.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (chain != null)
            {
                localVarRequestOptions.QueryParameters.Add(Moralis.EvmApi.Client.ClientUtils.ParameterToMultiMap("", "chain", chain));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/nft/{address}/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncNFTContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
