/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// Trade
    /// </summary>
    [DataContract(Name = "trade")]
    public partial class Trade : IEquatable<Trade>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Trade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        /// <param name="transactionHash">The transaction hash (required).</param>
        /// <param name="transactionIndex">The transaction index (required).</param>
        /// <param name="tokenIds">The token ID(s) traded (required).</param>
        /// <param name="sellerAddress">The address that sold the NFT (required).</param>
        /// <param name="buyerAddress">The address that bought the NFT (required).</param>
        /// <param name="marketplaceAddress">The address of the contract that traded the NFT (required).</param>
        /// <param name="price">The value that was sent in the transaction (ETH/BNB/etc..) (required).</param>
        /// <param name="blockTimestamp">The block timestamp (required).</param>
        /// <param name="blockNumber">The block number of the transaction (required).</param>
        /// <param name="blockHash">The block hash (required).</param>
        public Trade(string transactionHash = default(string), string transactionIndex = default(string), List<string> tokenIds = default(List<string>), string sellerAddress = default(string), string buyerAddress = default(string), string marketplaceAddress = default(string), string price = default(string), string blockTimestamp = default(string), string blockNumber = default(string), string blockHash = default(string))
        {
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for Trade and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "transactionIndex" is required (not null)
            if (transactionIndex == null)
            {
                throw new ArgumentNullException("transactionIndex is a required property for Trade and cannot be null");
            }
            this.TransactionIndex = transactionIndex;
            // to ensure "tokenIds" is required (not null)
            if (tokenIds == null)
            {
                throw new ArgumentNullException("tokenIds is a required property for Trade and cannot be null");
            }
            this.TokenIds = tokenIds;
            // to ensure "sellerAddress" is required (not null)
            if (sellerAddress == null)
            {
                throw new ArgumentNullException("sellerAddress is a required property for Trade and cannot be null");
            }
            this.SellerAddress = sellerAddress;
            // to ensure "buyerAddress" is required (not null)
            if (buyerAddress == null)
            {
                throw new ArgumentNullException("buyerAddress is a required property for Trade and cannot be null");
            }
            this.BuyerAddress = buyerAddress;
            // to ensure "marketplaceAddress" is required (not null)
            if (marketplaceAddress == null)
            {
                throw new ArgumentNullException("marketplaceAddress is a required property for Trade and cannot be null");
            }
            this.MarketplaceAddress = marketplaceAddress;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for Trade and cannot be null");
            }
            this.Price = price;
            // to ensure "blockTimestamp" is required (not null)
            if (blockTimestamp == null)
            {
                throw new ArgumentNullException("blockTimestamp is a required property for Trade and cannot be null");
            }
            this.BlockTimestamp = blockTimestamp;
            // to ensure "blockNumber" is required (not null)
            if (blockNumber == null)
            {
                throw new ArgumentNullException("blockNumber is a required property for Trade and cannot be null");
            }
            this.BlockNumber = blockNumber;
            // to ensure "blockHash" is required (not null)
            if (blockHash == null)
            {
                throw new ArgumentNullException("blockHash is a required property for Trade and cannot be null");
            }
            this.BlockHash = blockHash;
        }

        /// <summary>
        /// The transaction hash
        /// </summary>
        /// <value>The transaction hash</value>
        [DataMember(Name = "transaction_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// The transaction index
        /// </summary>
        /// <value>The transaction index</value>
        [DataMember(Name = "transaction_index", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionIndex { get; set; }

        /// <summary>
        /// The token ID(s) traded
        /// </summary>
        /// <value>The token ID(s) traded</value>
        [DataMember(Name = "token_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<string> TokenIds { get; set; }

        /// <summary>
        /// The address that sold the NFT
        /// </summary>
        /// <value>The address that sold the NFT</value>
        [DataMember(Name = "seller_address", IsRequired = true, EmitDefaultValue = true)]
        public string SellerAddress { get; set; }

        /// <summary>
        /// The address that bought the NFT
        /// </summary>
        /// <value>The address that bought the NFT</value>
        [DataMember(Name = "buyer_address", IsRequired = true, EmitDefaultValue = true)]
        public string BuyerAddress { get; set; }

        /// <summary>
        /// The address of the contract that traded the NFT
        /// </summary>
        /// <value>The address of the contract that traded the NFT</value>
        [DataMember(Name = "marketplace_address", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceAddress { get; set; }

        /// <summary>
        /// The value that was sent in the transaction (ETH/BNB/etc..)
        /// </summary>
        /// <value>The value that was sent in the transaction (ETH/BNB/etc..)</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        /// <value>The block timestamp</value>
        [DataMember(Name = "block_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string BlockTimestamp { get; set; }

        /// <summary>
        /// The block number of the transaction
        /// </summary>
        /// <value>The block number of the transaction</value>
        [DataMember(Name = "block_number", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        /// <value>The block hash</value>
        [DataMember(Name = "block_hash", IsRequired = true, EmitDefaultValue = true)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Trade {\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  TokenIds: ").Append(TokenIds).Append("\n");
            sb.Append("  SellerAddress: ").Append(SellerAddress).Append("\n");
            sb.Append("  BuyerAddress: ").Append(BuyerAddress).Append("\n");
            sb.Append("  MarketplaceAddress: ").Append(MarketplaceAddress).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BlockTimestamp: ").Append(BlockTimestamp).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trade);
        }

        /// <summary>
        /// Returns true if Trade instances are equal
        /// </summary>
        /// <param name="input">Instance of Trade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trade input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.TransactionIndex == input.TransactionIndex ||
                    (this.TransactionIndex != null &&
                    this.TransactionIndex.Equals(input.TransactionIndex))
                ) && 
                (
                    this.TokenIds == input.TokenIds ||
                    this.TokenIds != null &&
                    input.TokenIds != null &&
                    this.TokenIds.SequenceEqual(input.TokenIds)
                ) && 
                (
                    this.SellerAddress == input.SellerAddress ||
                    (this.SellerAddress != null &&
                    this.SellerAddress.Equals(input.SellerAddress))
                ) && 
                (
                    this.BuyerAddress == input.BuyerAddress ||
                    (this.BuyerAddress != null &&
                    this.BuyerAddress.Equals(input.BuyerAddress))
                ) && 
                (
                    this.MarketplaceAddress == input.MarketplaceAddress ||
                    (this.MarketplaceAddress != null &&
                    this.MarketplaceAddress.Equals(input.MarketplaceAddress))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.BlockTimestamp == input.BlockTimestamp ||
                    (this.BlockTimestamp != null &&
                    this.BlockTimestamp.Equals(input.BlockTimestamp))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.TransactionIndex != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionIndex.GetHashCode();
                }
                if (this.TokenIds != null)
                {
                    hashCode = (hashCode * 59) + this.TokenIds.GetHashCode();
                }
                if (this.SellerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.SellerAddress.GetHashCode();
                }
                if (this.BuyerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerAddress.GetHashCode();
                }
                if (this.MarketplaceAddress != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceAddress.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.BlockTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.BlockTimestamp.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.BlockHash != null)
                {
                    hashCode = (hashCode * 59) + this.BlockHash.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
