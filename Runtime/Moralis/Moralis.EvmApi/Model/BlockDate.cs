/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// BlockDate
    /// </summary>
    [DataContract(Name = "blockDate")]
    public partial class BlockDate : IEquatable<BlockDate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockDate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockDate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockDate" /> class.
        /// </summary>
        /// <param name="date">The date of the block (required).</param>
        /// <param name="block">The block number (required).</param>
        /// <param name="timestamp">The timestamp of the block (required).</param>
        /// <param name="blockTimestamp">The timestamp of the block.</param>
        /// <param name="hash">The block hash.</param>
        /// <param name="parentHash">The block hash of the parent block.</param>
        public BlockDate(string date = default(string), decimal block = default(decimal), decimal timestamp = default(decimal), string blockTimestamp = default(string), string hash = default(string), string parentHash = default(string))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for BlockDate and cannot be null");
            }
            this.Date = date;
            this.Block = block;
            this.Timestamp = timestamp;
            this.BlockTimestamp = blockTimestamp;
            this.Hash = hash;
            this.ParentHash = parentHash;
        }

        /// <summary>
        /// The date of the block
        /// </summary>
        /// <value>The date of the block</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        /// <value>The block number</value>
        [DataMember(Name = "block", IsRequired = true, EmitDefaultValue = true)]
        public decimal Block { get; set; }

        /// <summary>
        /// The timestamp of the block
        /// </summary>
        /// <value>The timestamp of the block</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public decimal Timestamp { get; set; }

        /// <summary>
        /// The timestamp of the block
        /// </summary>
        /// <value>The timestamp of the block</value>
        [DataMember(Name = "block_timestamp", EmitDefaultValue = false)]
        public string BlockTimestamp { get; set; }

        /// <summary>
        /// The block hash
        /// </summary>
        /// <value>The block hash</value>
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public string Hash { get; set; }

        /// <summary>
        /// The block hash of the parent block
        /// </summary>
        /// <value>The block hash of the parent block</value>
        [DataMember(Name = "parent_hash", EmitDefaultValue = false)]
        public string ParentHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockDate {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  BlockTimestamp: ").Append(BlockTimestamp).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  ParentHash: ").Append(ParentHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockDate);
        }

        /// <summary>
        /// Returns true if BlockDate instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockDate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockDate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Block == input.Block ||
                    this.Block.Equals(input.Block)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.BlockTimestamp == input.BlockTimestamp ||
                    (this.BlockTimestamp != null &&
                    this.BlockTimestamp.Equals(input.BlockTimestamp))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.ParentHash == input.ParentHash ||
                    (this.ParentHash != null &&
                    this.ParentHash.Equals(input.ParentHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Block.GetHashCode();
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                if (this.BlockTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.BlockTimestamp.GetHashCode();
                }
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                if (this.ParentHash != null)
                {
                    hashCode = (hashCode * 59) + this.ParentHash.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
