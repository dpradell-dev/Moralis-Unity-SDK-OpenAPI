/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// EndpointWeights
    /// </summary>
    [DataContract(Name = "endpointWeights")]
    public partial class EndpointWeights : IEquatable<EndpointWeights>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointWeights" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EndpointWeights() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointWeights" /> class.
        /// </summary>
        /// <param name="endpoint">endpoint (required).</param>
        /// <param name="path">The path to the endpoint (required).</param>
        /// <param name="rateLimitCost">The number of hits the request counts towards rate limiting (required).</param>
        /// <param name="price">The number of compute units the request counts towards billing (required).</param>
        public EndpointWeights(string endpoint = default(string), string path = default(string), string rateLimitCost = default(string), string price = default(string))
        {
            // to ensure "endpoint" is required (not null)
            if (endpoint == null)
            {
                throw new ArgumentNullException("endpoint is a required property for EndpointWeights and cannot be null");
            }
            this.Endpoint = endpoint;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for EndpointWeights and cannot be null");
            }
            this.Path = path;
            // to ensure "rateLimitCost" is required (not null)
            if (rateLimitCost == null)
            {
                throw new ArgumentNullException("rateLimitCost is a required property for EndpointWeights and cannot be null");
            }
            this.RateLimitCost = rateLimitCost;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for EndpointWeights and cannot be null");
            }
            this.Price = price;
        }

        /// <summary>
        /// endpoint
        /// </summary>
        /// <value>endpoint</value>
        [DataMember(Name = "endpoint", IsRequired = true, EmitDefaultValue = true)]
        public string Endpoint { get; set; }

        /// <summary>
        /// The path to the endpoint
        /// </summary>
        /// <value>The path to the endpoint</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// The number of hits the request counts towards rate limiting
        /// </summary>
        /// <value>The number of hits the request counts towards rate limiting</value>
        [DataMember(Name = "rateLimitCost", IsRequired = true, EmitDefaultValue = true)]
        public string RateLimitCost { get; set; }

        /// <summary>
        /// The number of compute units the request counts towards billing
        /// </summary>
        /// <value>The number of compute units the request counts towards billing</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndpointWeights {\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RateLimitCost: ").Append(RateLimitCost).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointWeights);
        }

        /// <summary>
        /// Returns true if EndpointWeights instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointWeights to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointWeights input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.RateLimitCost == input.RateLimitCost ||
                    (this.RateLimitCost != null &&
                    this.RateLimitCost.Equals(input.RateLimitCost))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Endpoint != null)
                {
                    hashCode = (hashCode * 59) + this.Endpoint.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.RateLimitCost != null)
                {
                    hashCode = (hashCode * 59) + this.RateLimitCost.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
