/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// NftCollections
    /// </summary>
    [DataContract(Name = "nftCollections")]
    public partial class NftCollections : IEquatable<NftCollections>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftCollections" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NftCollections() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NftCollections" /> class.
        /// </summary>
        /// <param name="tokenAddress">The address of the NFT contract (required).</param>
        /// <param name="contractType">The type of NFT contract standard (required).</param>
        /// <param name="name">The name of the NFT contract (required).</param>
        /// <param name="symbol">The symbol of the NFT contract (required).</param>
        public NftCollections(string tokenAddress = default(string), string contractType = default(string), string name = default(string), string symbol = default(string))
        {
            // to ensure "tokenAddress" is required (not null)
            if (tokenAddress == null)
            {
                throw new ArgumentNullException("tokenAddress is a required property for NftCollections and cannot be null");
            }
            this.TokenAddress = tokenAddress;
            // to ensure "contractType" is required (not null)
            if (contractType == null)
            {
                throw new ArgumentNullException("contractType is a required property for NftCollections and cannot be null");
            }
            this.ContractType = contractType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NftCollections and cannot be null");
            }
            this.Name = name;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for NftCollections and cannot be null");
            }
            this.Symbol = symbol;
        }

        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        /// <value>The address of the NFT contract</value>
        [DataMember(Name = "token_address", IsRequired = true, EmitDefaultValue = true)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        /// <value>The type of NFT contract standard</value>
        [DataMember(Name = "contract_type", IsRequired = true, EmitDefaultValue = true)]
        public string ContractType { get; set; }

        /// <summary>
        /// The name of the NFT contract
        /// </summary>
        /// <value>The name of the NFT contract</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        /// <value>The symbol of the NFT contract</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NftCollections {\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftCollections);
        }

        /// <summary>
        /// Returns true if NftCollections instances are equal
        /// </summary>
        /// <param name="input">Instance of NftCollections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftCollections input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                if (this.ContractType != null)
                {
                    hashCode = (hashCode * 59) + this.ContractType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
