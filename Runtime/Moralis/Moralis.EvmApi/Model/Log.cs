/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// Log
    /// </summary>
    [DataContract(Name = "log")]
    public partial class Log : IEquatable<Log>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Log" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Log() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Log" /> class.
        /// </summary>
        /// <param name="logIndex">logIndex (required).</param>
        /// <param name="transactionHash">The hash of the transaction (required).</param>
        /// <param name="transactionIndex">transactionIndex (required).</param>
        /// <param name="address">The address of the contract (required).</param>
        /// <param name="data">The data of the log (required).</param>
        /// <param name="topic0">topic0 (required).</param>
        /// <param name="topic1">topic1.</param>
        /// <param name="topic2">topic2.</param>
        /// <param name="topic3">topic3.</param>
        /// <param name="blockTimestamp">The timestamp of the block (required).</param>
        /// <param name="blockNumber">The block number (required).</param>
        /// <param name="blockHash">The hash of the block (required).</param>
        public Log(string logIndex = default(string), string transactionHash = default(string), string transactionIndex = default(string), string address = default(string), string data = default(string), string topic0 = default(string), LogTopic1 topic1 = default(LogTopic1), LogTopic2 topic2 = default(LogTopic2), LogTopic3 topic3 = default(LogTopic3), string blockTimestamp = default(string), string blockNumber = default(string), string blockHash = default(string))
        {
            // to ensure "logIndex" is required (not null)
            if (logIndex == null)
            {
                throw new ArgumentNullException("logIndex is a required property for Log and cannot be null");
            }
            this.LogIndex = logIndex;
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for Log and cannot be null");
            }
            this.TransactionHash = transactionHash;
            // to ensure "transactionIndex" is required (not null)
            if (transactionIndex == null)
            {
                throw new ArgumentNullException("transactionIndex is a required property for Log and cannot be null");
            }
            this.TransactionIndex = transactionIndex;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for Log and cannot be null");
            }
            this.Address = address;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for Log and cannot be null");
            }
            this.Data = data;
            // to ensure "topic0" is required (not null)
            if (topic0 == null)
            {
                throw new ArgumentNullException("topic0 is a required property for Log and cannot be null");
            }
            this.Topic0 = topic0;
            // to ensure "blockTimestamp" is required (not null)
            if (blockTimestamp == null)
            {
                throw new ArgumentNullException("blockTimestamp is a required property for Log and cannot be null");
            }
            this.BlockTimestamp = blockTimestamp;
            // to ensure "blockNumber" is required (not null)
            if (blockNumber == null)
            {
                throw new ArgumentNullException("blockNumber is a required property for Log and cannot be null");
            }
            this.BlockNumber = blockNumber;
            // to ensure "blockHash" is required (not null)
            if (blockHash == null)
            {
                throw new ArgumentNullException("blockHash is a required property for Log and cannot be null");
            }
            this.BlockHash = blockHash;
            this.Topic1 = topic1;
            this.Topic2 = topic2;
            this.Topic3 = topic3;
        }

        /// <summary>
        /// Gets or Sets LogIndex
        /// </summary>
        [DataMember(Name = "log_index", IsRequired = true, EmitDefaultValue = true)]
        public string LogIndex { get; set; }

        /// <summary>
        /// The hash of the transaction
        /// </summary>
        /// <value>The hash of the transaction</value>
        [DataMember(Name = "transaction_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIndex
        /// </summary>
        [DataMember(Name = "transaction_index", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionIndex { get; set; }

        /// <summary>
        /// The address of the contract
        /// </summary>
        /// <value>The address of the contract</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The data of the log
        /// </summary>
        /// <value>The data of the log</value>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Topic0
        /// </summary>
        [DataMember(Name = "topic0", IsRequired = true, EmitDefaultValue = true)]
        public string Topic0 { get; set; }

        /// <summary>
        /// Gets or Sets Topic1
        /// </summary>
        [DataMember(Name = "topic1", EmitDefaultValue = false)]
        public LogTopic1 Topic1 { get; set; }

        /// <summary>
        /// Gets or Sets Topic2
        /// </summary>
        [DataMember(Name = "topic2", EmitDefaultValue = false)]
        public LogTopic2 Topic2 { get; set; }

        /// <summary>
        /// Gets or Sets Topic3
        /// </summary>
        [DataMember(Name = "topic3", EmitDefaultValue = false)]
        public LogTopic3 Topic3 { get; set; }

        /// <summary>
        /// The timestamp of the block
        /// </summary>
        /// <value>The timestamp of the block</value>
        [DataMember(Name = "block_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string BlockTimestamp { get; set; }

        /// <summary>
        /// The block number
        /// </summary>
        /// <value>The block number</value>
        [DataMember(Name = "block_number", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// The hash of the block
        /// </summary>
        /// <value>The hash of the block</value>
        [DataMember(Name = "block_hash", IsRequired = true, EmitDefaultValue = true)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Log {\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Topic0: ").Append(Topic0).Append("\n");
            sb.Append("  Topic1: ").Append(Topic1).Append("\n");
            sb.Append("  Topic2: ").Append(Topic2).Append("\n");
            sb.Append("  Topic3: ").Append(Topic3).Append("\n");
            sb.Append("  BlockTimestamp: ").Append(BlockTimestamp).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Log);
        }

        /// <summary>
        /// Returns true if Log instances are equal
        /// </summary>
        /// <param name="input">Instance of Log to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Log input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LogIndex == input.LogIndex ||
                    (this.LogIndex != null &&
                    this.LogIndex.Equals(input.LogIndex))
                ) && 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.TransactionIndex == input.TransactionIndex ||
                    (this.TransactionIndex != null &&
                    this.TransactionIndex.Equals(input.TransactionIndex))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Topic0 == input.Topic0 ||
                    (this.Topic0 != null &&
                    this.Topic0.Equals(input.Topic0))
                ) && 
                (
                    this.Topic1 == input.Topic1 ||
                    (this.Topic1 != null &&
                    this.Topic1.Equals(input.Topic1))
                ) && 
                (
                    this.Topic2 == input.Topic2 ||
                    (this.Topic2 != null &&
                    this.Topic2.Equals(input.Topic2))
                ) && 
                (
                    this.Topic3 == input.Topic3 ||
                    (this.Topic3 != null &&
                    this.Topic3.Equals(input.Topic3))
                ) && 
                (
                    this.BlockTimestamp == input.BlockTimestamp ||
                    (this.BlockTimestamp != null &&
                    this.BlockTimestamp.Equals(input.BlockTimestamp))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogIndex != null)
                {
                    hashCode = (hashCode * 59) + this.LogIndex.GetHashCode();
                }
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.TransactionIndex != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionIndex.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Topic0 != null)
                {
                    hashCode = (hashCode * 59) + this.Topic0.GetHashCode();
                }
                if (this.Topic1 != null)
                {
                    hashCode = (hashCode * 59) + this.Topic1.GetHashCode();
                }
                if (this.Topic2 != null)
                {
                    hashCode = (hashCode * 59) + this.Topic2.GetHashCode();
                }
                if (this.Topic3 != null)
                {
                    hashCode = (hashCode * 59) + this.Topic3.GetHashCode();
                }
                if (this.BlockTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.BlockTimestamp.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.BlockHash != null)
                {
                    hashCode = (hashCode * 59) + this.BlockHash.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
