/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// Erc20Price
    /// </summary>
    [DataContract(Name = "erc20Price")]
    public partial class Erc20Price : IEquatable<Erc20Price>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Erc20Price" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Erc20Price() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Erc20Price" /> class.
        /// </summary>
        /// <param name="nativePrice">nativePrice.</param>
        /// <param name="usdPrice">The price in USD for the token (required).</param>
        /// <param name="exchangeAddress">The address of the exchange used to calculate the price.</param>
        /// <param name="exchangeName">The name of the exchange used to calculate the price.</param>
        public Erc20Price(NativeErc20Price nativePrice = default(NativeErc20Price), double usdPrice = default(double), string exchangeAddress = default(string), string exchangeName = default(string))
        {
            this.UsdPrice = usdPrice;
            this.NativePrice = nativePrice;
            this.ExchangeAddress = exchangeAddress;
            this.ExchangeName = exchangeName;
        }

        /// <summary>
        /// Gets or Sets NativePrice
        /// </summary>
        [DataMember(Name = "nativePrice", EmitDefaultValue = false)]
        public NativeErc20Price NativePrice { get; set; }

        /// <summary>
        /// The price in USD for the token
        /// </summary>
        /// <value>The price in USD for the token</value>
        [DataMember(Name = "usdPrice", IsRequired = true, EmitDefaultValue = true)]
        public double UsdPrice { get; set; }

        /// <summary>
        /// The address of the exchange used to calculate the price
        /// </summary>
        /// <value>The address of the exchange used to calculate the price</value>
        [DataMember(Name = "exchangeAddress", EmitDefaultValue = false)]
        public string ExchangeAddress { get; set; }

        /// <summary>
        /// The name of the exchange used to calculate the price
        /// </summary>
        /// <value>The name of the exchange used to calculate the price</value>
        [DataMember(Name = "exchangeName", EmitDefaultValue = false)]
        public string ExchangeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Erc20Price {\n");
            sb.Append("  NativePrice: ").Append(NativePrice).Append("\n");
            sb.Append("  UsdPrice: ").Append(UsdPrice).Append("\n");
            sb.Append("  ExchangeAddress: ").Append(ExchangeAddress).Append("\n");
            sb.Append("  ExchangeName: ").Append(ExchangeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Erc20Price);
        }

        /// <summary>
        /// Returns true if Erc20Price instances are equal
        /// </summary>
        /// <param name="input">Instance of Erc20Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Erc20Price input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NativePrice == input.NativePrice ||
                    (this.NativePrice != null &&
                    this.NativePrice.Equals(input.NativePrice))
                ) && 
                (
                    this.UsdPrice == input.UsdPrice ||
                    this.UsdPrice.Equals(input.UsdPrice)
                ) && 
                (
                    this.ExchangeAddress == input.ExchangeAddress ||
                    (this.ExchangeAddress != null &&
                    this.ExchangeAddress.Equals(input.ExchangeAddress))
                ) && 
                (
                    this.ExchangeName == input.ExchangeName ||
                    (this.ExchangeName != null &&
                    this.ExchangeName.Equals(input.ExchangeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NativePrice != null)
                {
                    hashCode = (hashCode * 59) + this.NativePrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsdPrice.GetHashCode();
                if (this.ExchangeAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeAddress.GetHashCode();
                }
                if (this.ExchangeName != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeName.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
