/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// GetPairReserves200Response
    /// </summary>
    [DataContract(Name = "getPairReserves_200_response")]
    public partial class GetPairReserves200Response : IEquatable<GetPairReserves200Response>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPairReserves200Response" /> class.
        /// </summary>
        /// <param name="reserve0">reserve0.</param>
        /// <param name="reserve1">reserve1.</param>
        public GetPairReserves200Response(string reserve0 = default(string), string reserve1 = default(string))
        {
            this.Reserve0 = reserve0;
            this.Reserve1 = reserve1;
        }

        /// <summary>
        /// Gets or Sets Reserve0
        /// </summary>
        [DataMember(Name = "reserve0", EmitDefaultValue = false)]
        public string Reserve0 { get; set; }

        /// <summary>
        /// Gets or Sets Reserve1
        /// </summary>
        [DataMember(Name = "reserve1", EmitDefaultValue = false)]
        public string Reserve1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPairReserves200Response {\n");
            sb.Append("  Reserve0: ").Append(Reserve0).Append("\n");
            sb.Append("  Reserve1: ").Append(Reserve1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPairReserves200Response);
        }

        /// <summary>
        /// Returns true if GetPairReserves200Response instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPairReserves200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPairReserves200Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reserve0 == input.Reserve0 ||
                    (this.Reserve0 != null &&
                    this.Reserve0.Equals(input.Reserve0))
                ) && 
                (
                    this.Reserve1 == input.Reserve1 ||
                    (this.Reserve1 != null &&
                    this.Reserve1.Equals(input.Reserve1))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reserve0 != null)
                {
                    hashCode = (hashCode * 59) + this.Reserve0.GetHashCode();
                }
                if (this.Reserve1 != null)
                {
                    hashCode = (hashCode * 59) + this.Reserve1.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
