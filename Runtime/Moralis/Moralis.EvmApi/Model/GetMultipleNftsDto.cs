/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// GetMultipleNftsDto
    /// </summary>
    [DataContract(Name = "GetMultipleNftsDto")]
    public partial class GetMultipleNftsDto : IEquatable<GetMultipleNftsDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMultipleNftsDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMultipleNftsDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMultipleNftsDto" /> class.
        /// </summary>
        /// <param name="tokens">The tokens to be fetched (max 25 tokens) (required).</param>
        /// <param name="normalizeMetadata">Should normalized metadata be returned?.</param>
        public GetMultipleNftsDto(List<TokenItem> tokens = default(List<TokenItem>), bool normalizeMetadata = default(bool))
        {
            // to ensure "tokens" is required (not null)
            if (tokens == null)
            {
                throw new ArgumentNullException("tokens is a required property for GetMultipleNftsDto and cannot be null");
            }
            this.Tokens = tokens;
            this.NormalizeMetadata = normalizeMetadata;
        }

        /// <summary>
        /// The tokens to be fetched (max 25 tokens)
        /// </summary>
        /// <value>The tokens to be fetched (max 25 tokens)</value>
        [DataMember(Name = "tokens", IsRequired = true, EmitDefaultValue = true)]
        public List<TokenItem> Tokens { get; set; }

        /// <summary>
        /// Should normalized metadata be returned?
        /// </summary>
        /// <value>Should normalized metadata be returned?</value>
        [DataMember(Name = "normalizeMetadata", EmitDefaultValue = true)]
        public bool NormalizeMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMultipleNftsDto {\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  NormalizeMetadata: ").Append(NormalizeMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMultipleNftsDto);
        }

        /// <summary>
        /// Returns true if GetMultipleNftsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMultipleNftsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMultipleNftsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.NormalizeMetadata == input.NormalizeMetadata ||
                    this.NormalizeMetadata.Equals(input.NormalizeMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tokens != null)
                {
                    hashCode = (hashCode * 59) + this.Tokens.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NormalizeMetadata.GetHashCode();
                return hashCode;
            }
        }

    }

}
