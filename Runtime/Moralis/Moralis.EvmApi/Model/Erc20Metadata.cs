/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// Erc20Metadata
    /// </summary>
    [DataContract(Name = "erc20Metadata")]
    public partial class Erc20Metadata : IEquatable<Erc20Metadata>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Erc20Metadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Erc20Metadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Erc20Metadata" /> class.
        /// </summary>
        /// <param name="address">The address of the token contract (required).</param>
        /// <param name="name">The name of the token contract (required).</param>
        /// <param name="symbol">The symbol of the NFT contract (required).</param>
        /// <param name="decimals">The number of decimals on the token (required).</param>
        /// <param name="logo">The logo of the token.</param>
        /// <param name="logoHash">The logo hash.</param>
        /// <param name="thumbnail">The thumbnail of the logo.</param>
        /// <param name="blockNumber">blockNumber.</param>
        /// <param name="validated">validated.</param>
        public Erc20Metadata(string address = default(string), string name = default(string), string symbol = default(string), string decimals = default(string), string logo = default(string), string logoHash = default(string), string thumbnail = default(string), string blockNumber = default(string), string validated = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for Erc20Metadata and cannot be null");
            }
            this.Address = address;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Erc20Metadata and cannot be null");
            }
            this.Name = name;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for Erc20Metadata and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "decimals" is required (not null)
            if (decimals == null)
            {
                throw new ArgumentNullException("decimals is a required property for Erc20Metadata and cannot be null");
            }
            this.Decimals = decimals;
            this.Logo = logo;
            this.LogoHash = logoHash;
            this.Thumbnail = thumbnail;
            this.BlockNumber = blockNumber;
            this.Validated = validated;
        }

        /// <summary>
        /// The address of the token contract
        /// </summary>
        /// <value>The address of the token contract</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The name of the token contract
        /// </summary>
        /// <value>The name of the token contract</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        /// <value>The symbol of the NFT contract</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The number of decimals on the token
        /// </summary>
        /// <value>The number of decimals on the token</value>
        [DataMember(Name = "decimals", IsRequired = true, EmitDefaultValue = true)]
        public string Decimals { get; set; }

        /// <summary>
        /// The logo of the token
        /// </summary>
        /// <value>The logo of the token</value>
        [DataMember(Name = "logo", EmitDefaultValue = false)]
        public string Logo { get; set; }

        /// <summary>
        /// The logo hash
        /// </summary>
        /// <value>The logo hash</value>
        [DataMember(Name = "logo_hash", EmitDefaultValue = false)]
        public string LogoHash { get; set; }

        /// <summary>
        /// The thumbnail of the logo
        /// </summary>
        /// <value>The thumbnail of the logo</value>
        [DataMember(Name = "thumbnail", EmitDefaultValue = false)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Validated
        /// </summary>
        [DataMember(Name = "validated", EmitDefaultValue = false)]
        public string Validated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Erc20Metadata {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  LogoHash: ").Append(LogoHash).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Validated: ").Append(Validated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Erc20Metadata);
        }

        /// <summary>
        /// Returns true if Erc20Metadata instances are equal
        /// </summary>
        /// <param name="input">Instance of Erc20Metadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Erc20Metadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.LogoHash == input.LogoHash ||
                    (this.LogoHash != null &&
                    this.LogoHash.Equals(input.LogoHash))
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Validated == input.Validated ||
                    (this.Validated != null &&
                    this.Validated.Equals(input.Validated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Decimals != null)
                {
                    hashCode = (hashCode * 59) + this.Decimals.GetHashCode();
                }
                if (this.Logo != null)
                {
                    hashCode = (hashCode * 59) + this.Logo.GetHashCode();
                }
                if (this.LogoHash != null)
                {
                    hashCode = (hashCode * 59) + this.LogoHash.GetHashCode();
                }
                if (this.Thumbnail != null)
                {
                    hashCode = (hashCode * 59) + this.Thumbnail.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.Validated != null)
                {
                    hashCode = (hashCode * 59) + this.Validated.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
