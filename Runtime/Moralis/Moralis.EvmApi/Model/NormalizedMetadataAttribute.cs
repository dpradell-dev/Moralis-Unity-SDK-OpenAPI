/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// NormalizedMetadataAttribute
    /// </summary>
    [DataContract(Name = "normalizedMetadataAttribute")]
    public partial class NormalizedMetadataAttribute : IEquatable<NormalizedMetadataAttribute>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizedMetadataAttribute" /> class.
        /// </summary>
        /// <param name="traitType">The trait title or descriptor.</param>
        /// <param name="value">The value of the attribute.</param>
        /// <param name="displayType">The type the attribute value should be displayed as.</param>
        /// <param name="maxValue">For numeric values, the upper range.</param>
        /// <param name="traitCount">The number of possible values for this trait.</param>
        /// <param name="order">Order the trait should appear in the attribute list..</param>
        public NormalizedMetadataAttribute(string traitType = default(string), Object value = default(Object), string displayType = default(string), decimal maxValue = default(decimal), decimal traitCount = default(decimal), decimal order = default(decimal))
        {
            this.TraitType = traitType;
            this.Value = value;
            this.DisplayType = displayType;
            this.MaxValue = maxValue;
            this.TraitCount = traitCount;
            this.Order = order;
        }

        /// <summary>
        /// The trait title or descriptor
        /// </summary>
        /// <value>The trait title or descriptor</value>
        [DataMember(Name = "trait_type", EmitDefaultValue = false)]
        public string TraitType { get; set; }

        /// <summary>
        /// The value of the attribute
        /// </summary>
        /// <value>The value of the attribute</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public Object Value { get; set; }

        /// <summary>
        /// The type the attribute value should be displayed as
        /// </summary>
        /// <value>The type the attribute value should be displayed as</value>
        [DataMember(Name = "display_type", EmitDefaultValue = false)]
        public string DisplayType { get; set; }

        /// <summary>
        /// For numeric values, the upper range
        /// </summary>
        /// <value>For numeric values, the upper range</value>
        [DataMember(Name = "max_value", EmitDefaultValue = false)]
        public decimal MaxValue { get; set; }

        /// <summary>
        /// The number of possible values for this trait
        /// </summary>
        /// <value>The number of possible values for this trait</value>
        [DataMember(Name = "trait_count", EmitDefaultValue = false)]
        public decimal TraitCount { get; set; }

        /// <summary>
        /// Order the trait should appear in the attribute list.
        /// </summary>
        /// <value>Order the trait should appear in the attribute list.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public decimal Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NormalizedMetadataAttribute {\n");
            sb.Append("  TraitType: ").Append(TraitType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  TraitCount: ").Append(TraitCount).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NormalizedMetadataAttribute);
        }

        /// <summary>
        /// Returns true if NormalizedMetadataAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of NormalizedMetadataAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizedMetadataAttribute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TraitType == input.TraitType ||
                    (this.TraitType != null &&
                    this.TraitType.Equals(input.TraitType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.DisplayType == input.DisplayType ||
                    (this.DisplayType != null &&
                    this.DisplayType.Equals(input.DisplayType))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    this.MaxValue.Equals(input.MaxValue)
                ) && 
                (
                    this.TraitCount == input.TraitCount ||
                    this.TraitCount.Equals(input.TraitCount)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraitType != null)
                {
                    hashCode = (hashCode * 59) + this.TraitType.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.DisplayType != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxValue.GetHashCode();
                hashCode = (hashCode * 59) + this.TraitCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                return hashCode;
            }
        }

    }

}
