/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// NftOwner
    /// </summary>
    [DataContract(Name = "nftOwner")]
    public partial class NftOwner : IEquatable<NftOwner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftOwner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NftOwner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NftOwner" /> class.
        /// </summary>
        /// <param name="tokenAddress">The address of the NFT contract (required).</param>
        /// <param name="tokenId">The token ID of the NFT (required).</param>
        /// <param name="contractType">The type of NFT contract standard (required).</param>
        /// <param name="ownerOf">The wallet address of the owner of the NFT (required).</param>
        /// <param name="blockNumber">The block number when the amount or owner changed (required).</param>
        /// <param name="blockNumberMinted">The block number when the NFT was minted (required).</param>
        /// <param name="tokenUri">The URI to the metadata of the token.</param>
        /// <param name="metadata">The metadata of the token.</param>
        /// <param name="normalizedMetadata">normalizedMetadata.</param>
        /// <param name="amount">The number of this item the user owns (used by ERC1155).</param>
        /// <param name="name">The name of the NFT contract (required).</param>
        /// <param name="symbol">The symbol of the NFT contract (required).</param>
        /// <param name="tokenHash">The token hash (required).</param>
        /// <param name="lastTokenUriSync">When the token_uri was last updated (required).</param>
        /// <param name="lastMetadataSync">When the metadata was last updated (required).</param>
        public NftOwner(string tokenAddress = default(string), string tokenId = default(string), string contractType = default(string), string ownerOf = default(string), string blockNumber = default(string), string blockNumberMinted = default(string), string tokenUri = default(string), string metadata = default(string), NormalizedMetadata normalizedMetadata = default(NormalizedMetadata), string amount = default(string), string name = default(string), string symbol = default(string), string tokenHash = default(string), string lastTokenUriSync = default(string), string lastMetadataSync = default(string))
        {
            // to ensure "tokenAddress" is required (not null)
            if (tokenAddress == null)
            {
                throw new ArgumentNullException("tokenAddress is a required property for NftOwner and cannot be null");
            }
            this.TokenAddress = tokenAddress;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for NftOwner and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "contractType" is required (not null)
            if (contractType == null)
            {
                throw new ArgumentNullException("contractType is a required property for NftOwner and cannot be null");
            }
            this.ContractType = contractType;
            // to ensure "ownerOf" is required (not null)
            if (ownerOf == null)
            {
                throw new ArgumentNullException("ownerOf is a required property for NftOwner and cannot be null");
            }
            this.OwnerOf = ownerOf;
            // to ensure "blockNumber" is required (not null)
            if (blockNumber == null)
            {
                throw new ArgumentNullException("blockNumber is a required property for NftOwner and cannot be null");
            }
            this.BlockNumber = blockNumber;
            // to ensure "blockNumberMinted" is required (not null)
            if (blockNumberMinted == null)
            {
                throw new ArgumentNullException("blockNumberMinted is a required property for NftOwner and cannot be null");
            }
            this.BlockNumberMinted = blockNumberMinted;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NftOwner and cannot be null");
            }
            this.Name = name;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for NftOwner and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "tokenHash" is required (not null)
            if (tokenHash == null)
            {
                throw new ArgumentNullException("tokenHash is a required property for NftOwner and cannot be null");
            }
            this.TokenHash = tokenHash;
            // to ensure "lastTokenUriSync" is required (not null)
            if (lastTokenUriSync == null)
            {
                throw new ArgumentNullException("lastTokenUriSync is a required property for NftOwner and cannot be null");
            }
            this.LastTokenUriSync = lastTokenUriSync;
            // to ensure "lastMetadataSync" is required (not null)
            if (lastMetadataSync == null)
            {
                throw new ArgumentNullException("lastMetadataSync is a required property for NftOwner and cannot be null");
            }
            this.LastMetadataSync = lastMetadataSync;
            this.TokenUri = tokenUri;
            this.Metadata = metadata;
            this.NormalizedMetadata = normalizedMetadata;
            this.Amount = amount;
        }

        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        /// <value>The address of the NFT contract</value>
        [DataMember(Name = "token_address", IsRequired = true, EmitDefaultValue = true)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// The token ID of the NFT
        /// </summary>
        /// <value>The token ID of the NFT</value>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        /// <value>The type of NFT contract standard</value>
        [DataMember(Name = "contract_type", IsRequired = true, EmitDefaultValue = true)]
        public string ContractType { get; set; }

        /// <summary>
        /// The wallet address of the owner of the NFT
        /// </summary>
        /// <value>The wallet address of the owner of the NFT</value>
        [DataMember(Name = "owner_of", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerOf { get; set; }

        /// <summary>
        /// The block number when the amount or owner changed
        /// </summary>
        /// <value>The block number when the amount or owner changed</value>
        [DataMember(Name = "block_number", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// The block number when the NFT was minted
        /// </summary>
        /// <value>The block number when the NFT was minted</value>
        [DataMember(Name = "block_number_minted", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumberMinted { get; set; }

        /// <summary>
        /// The URI to the metadata of the token
        /// </summary>
        /// <value>The URI to the metadata of the token</value>
        [DataMember(Name = "token_uri", EmitDefaultValue = false)]
        public string TokenUri { get; set; }

        /// <summary>
        /// The metadata of the token
        /// </summary>
        /// <value>The metadata of the token</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedMetadata
        /// </summary>
        [DataMember(Name = "normalized_metadata", EmitDefaultValue = false)]
        public NormalizedMetadata NormalizedMetadata { get; set; }

        /// <summary>
        /// The number of this item the user owns (used by ERC1155)
        /// </summary>
        /// <value>The number of this item the user owns (used by ERC1155)</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// The name of the NFT contract
        /// </summary>
        /// <value>The name of the NFT contract</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the NFT contract
        /// </summary>
        /// <value>The symbol of the NFT contract</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The token hash
        /// </summary>
        /// <value>The token hash</value>
        [DataMember(Name = "token_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TokenHash { get; set; }

        /// <summary>
        /// When the token_uri was last updated
        /// </summary>
        /// <value>When the token_uri was last updated</value>
        [DataMember(Name = "last_token_uri_sync", IsRequired = true, EmitDefaultValue = true)]
        public string LastTokenUriSync { get; set; }

        /// <summary>
        /// When the metadata was last updated
        /// </summary>
        /// <value>When the metadata was last updated</value>
        [DataMember(Name = "last_metadata_sync", IsRequired = true, EmitDefaultValue = true)]
        public string LastMetadataSync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NftOwner {\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  OwnerOf: ").Append(OwnerOf).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockNumberMinted: ").Append(BlockNumberMinted).Append("\n");
            sb.Append("  TokenUri: ").Append(TokenUri).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  NormalizedMetadata: ").Append(NormalizedMetadata).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TokenHash: ").Append(TokenHash).Append("\n");
            sb.Append("  LastTokenUriSync: ").Append(LastTokenUriSync).Append("\n");
            sb.Append("  LastMetadataSync: ").Append(LastMetadataSync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftOwner);
        }

        /// <summary>
        /// Returns true if NftOwner instances are equal
        /// </summary>
        /// <param name="input">Instance of NftOwner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftOwner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.OwnerOf == input.OwnerOf ||
                    (this.OwnerOf != null &&
                    this.OwnerOf.Equals(input.OwnerOf))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.BlockNumberMinted == input.BlockNumberMinted ||
                    (this.BlockNumberMinted != null &&
                    this.BlockNumberMinted.Equals(input.BlockNumberMinted))
                ) && 
                (
                    this.TokenUri == input.TokenUri ||
                    (this.TokenUri != null &&
                    this.TokenUri.Equals(input.TokenUri))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.NormalizedMetadata == input.NormalizedMetadata ||
                    (this.NormalizedMetadata != null &&
                    this.NormalizedMetadata.Equals(input.NormalizedMetadata))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.TokenHash == input.TokenHash ||
                    (this.TokenHash != null &&
                    this.TokenHash.Equals(input.TokenHash))
                ) && 
                (
                    this.LastTokenUriSync == input.LastTokenUriSync ||
                    (this.LastTokenUriSync != null &&
                    this.LastTokenUriSync.Equals(input.LastTokenUriSync))
                ) && 
                (
                    this.LastMetadataSync == input.LastMetadataSync ||
                    (this.LastMetadataSync != null &&
                    this.LastMetadataSync.Equals(input.LastMetadataSync))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.ContractType != null)
                {
                    hashCode = (hashCode * 59) + this.ContractType.GetHashCode();
                }
                if (this.OwnerOf != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerOf.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.BlockNumberMinted != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumberMinted.GetHashCode();
                }
                if (this.TokenUri != null)
                {
                    hashCode = (hashCode * 59) + this.TokenUri.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.NormalizedMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.NormalizedMetadata.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.TokenHash != null)
                {
                    hashCode = (hashCode * 59) + this.TokenHash.GetHashCode();
                }
                if (this.LastTokenUriSync != null)
                {
                    hashCode = (hashCode * 59) + this.LastTokenUriSync.GetHashCode();
                }
                if (this.LastMetadataSync != null)
                {
                    hashCode = (hashCode * 59) + this.LastMetadataSync.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
