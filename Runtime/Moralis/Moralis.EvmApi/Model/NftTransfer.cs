/*
 * EVM API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Moralis.EvmApi.Client.FileParameter;
using OpenAPIDateConverter = Moralis.EvmApi.Client.OpenAPIDateConverter;

namespace Moralis.EvmApi.Model
{
    /// <summary>
    /// NftTransfer
    /// </summary>
    [DataContract(Name = "nftTransfer")]
    public partial class NftTransfer : IEquatable<NftTransfer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NftTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NftTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NftTransfer" /> class.
        /// </summary>
        /// <param name="tokenAddress">The address of the NFT contract (required).</param>
        /// <param name="tokenId">The token ID of the NFT (required).</param>
        /// <param name="fromAddress">The address that sent the NFT.</param>
        /// <param name="toAddress">The address that received the NFT (required).</param>
        /// <param name="value">The value that was sent in the transaction (ETH/BNB/etc..).</param>
        /// <param name="amount">The number of tokens transferred.</param>
        /// <param name="contractType">The type of NFT contract standard (required).</param>
        /// <param name="blockNumber">The block number of the transaction (required).</param>
        /// <param name="blockTimestamp">The block timestamp (required).</param>
        /// <param name="blockHash">The block hash of the transaction (required).</param>
        /// <param name="transactionHash">The transaction hash (required).</param>
        /// <param name="transactionType">The transaction type.</param>
        /// <param name="transactionIndex">The transaction index.</param>
        /// <param name="logIndex">The log index (required).</param>
        /// <param name="_operator">The operator present only for ERC1155 transfers.</param>
        public NftTransfer(string tokenAddress = default(string), string tokenId = default(string), string fromAddress = default(string), string toAddress = default(string), string value = default(string), string amount = default(string), string contractType = default(string), string blockNumber = default(string), string blockTimestamp = default(string), string blockHash = default(string), string transactionHash = default(string), string transactionType = default(string), int transactionIndex = default(int), int logIndex = default(int), string _operator = default(string))
        {
            // to ensure "tokenAddress" is required (not null)
            if (tokenAddress == null)
            {
                throw new ArgumentNullException("tokenAddress is a required property for NftTransfer and cannot be null");
            }
            this.TokenAddress = tokenAddress;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
            {
                throw new ArgumentNullException("tokenId is a required property for NftTransfer and cannot be null");
            }
            this.TokenId = tokenId;
            // to ensure "toAddress" is required (not null)
            if (toAddress == null)
            {
                throw new ArgumentNullException("toAddress is a required property for NftTransfer and cannot be null");
            }
            this.ToAddress = toAddress;
            // to ensure "contractType" is required (not null)
            if (contractType == null)
            {
                throw new ArgumentNullException("contractType is a required property for NftTransfer and cannot be null");
            }
            this.ContractType = contractType;
            // to ensure "blockNumber" is required (not null)
            if (blockNumber == null)
            {
                throw new ArgumentNullException("blockNumber is a required property for NftTransfer and cannot be null");
            }
            this.BlockNumber = blockNumber;
            // to ensure "blockTimestamp" is required (not null)
            if (blockTimestamp == null)
            {
                throw new ArgumentNullException("blockTimestamp is a required property for NftTransfer and cannot be null");
            }
            this.BlockTimestamp = blockTimestamp;
            // to ensure "blockHash" is required (not null)
            if (blockHash == null)
            {
                throw new ArgumentNullException("blockHash is a required property for NftTransfer and cannot be null");
            }
            this.BlockHash = blockHash;
            // to ensure "transactionHash" is required (not null)
            if (transactionHash == null)
            {
                throw new ArgumentNullException("transactionHash is a required property for NftTransfer and cannot be null");
            }
            this.TransactionHash = transactionHash;
            this.LogIndex = logIndex;
            this.FromAddress = fromAddress;
            this.Value = value;
            this.Amount = amount;
            this.TransactionType = transactionType;
            this.TransactionIndex = transactionIndex;
            this.Operator = _operator;
        }

        /// <summary>
        /// The address of the NFT contract
        /// </summary>
        /// <value>The address of the NFT contract</value>
        [DataMember(Name = "token_address", IsRequired = true, EmitDefaultValue = true)]
        public string TokenAddress { get; set; }

        /// <summary>
        /// The token ID of the NFT
        /// </summary>
        /// <value>The token ID of the NFT</value>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// The address that sent the NFT
        /// </summary>
        /// <value>The address that sent the NFT</value>
        [DataMember(Name = "from_address", EmitDefaultValue = false)]
        public string FromAddress { get; set; }

        /// <summary>
        /// The address that received the NFT
        /// </summary>
        /// <value>The address that received the NFT</value>
        [DataMember(Name = "to_address", IsRequired = true, EmitDefaultValue = true)]
        public string ToAddress { get; set; }

        /// <summary>
        /// The value that was sent in the transaction (ETH/BNB/etc..)
        /// </summary>
        /// <value>The value that was sent in the transaction (ETH/BNB/etc..)</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// The number of tokens transferred
        /// </summary>
        /// <value>The number of tokens transferred</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// The type of NFT contract standard
        /// </summary>
        /// <value>The type of NFT contract standard</value>
        [DataMember(Name = "contract_type", IsRequired = true, EmitDefaultValue = true)]
        public string ContractType { get; set; }

        /// <summary>
        /// The block number of the transaction
        /// </summary>
        /// <value>The block number of the transaction</value>
        [DataMember(Name = "block_number", IsRequired = true, EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// The block timestamp
        /// </summary>
        /// <value>The block timestamp</value>
        [DataMember(Name = "block_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string BlockTimestamp { get; set; }

        /// <summary>
        /// The block hash of the transaction
        /// </summary>
        /// <value>The block hash of the transaction</value>
        [DataMember(Name = "block_hash", IsRequired = true, EmitDefaultValue = true)]
        public string BlockHash { get; set; }

        /// <summary>
        /// The transaction hash
        /// </summary>
        /// <value>The transaction hash</value>
        [DataMember(Name = "transaction_hash", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// The transaction type
        /// </summary>
        /// <value>The transaction type</value>
        [DataMember(Name = "transaction_type", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// The transaction index
        /// </summary>
        /// <value>The transaction index</value>
        [DataMember(Name = "transaction_index", EmitDefaultValue = false)]
        public int TransactionIndex { get; set; }

        /// <summary>
        /// The log index
        /// </summary>
        /// <value>The log index</value>
        [DataMember(Name = "log_index", IsRequired = true, EmitDefaultValue = true)]
        public int LogIndex { get; set; }

        /// <summary>
        /// The operator present only for ERC1155 transfers
        /// </summary>
        /// <value>The operator present only for ERC1155 transfers</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NftTransfer {\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockTimestamp: ").Append(BlockTimestamp).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NftTransfer);
        }

        /// <summary>
        /// Returns true if NftTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of NftTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NftTransfer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenAddress == input.TokenAddress ||
                    (this.TokenAddress != null &&
                    this.TokenAddress.Equals(input.TokenAddress))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && 
                (
                    this.ToAddress == input.ToAddress ||
                    (this.ToAddress != null &&
                    this.ToAddress.Equals(input.ToAddress))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.BlockTimestamp == input.BlockTimestamp ||
                    (this.BlockTimestamp != null &&
                    this.BlockTimestamp.Equals(input.BlockTimestamp))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                ) && 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.TransactionIndex == input.TransactionIndex ||
                    this.TransactionIndex.Equals(input.TransactionIndex)
                ) && 
                (
                    this.LogIndex == input.LogIndex ||
                    this.LogIndex.Equals(input.LogIndex)
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenAddress.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.FromAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FromAddress.GetHashCode();
                }
                if (this.ToAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ToAddress.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.ContractType != null)
                {
                    hashCode = (hashCode * 59) + this.ContractType.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.BlockTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.BlockTimestamp.GetHashCode();
                }
                if (this.BlockHash != null)
                {
                    hashCode = (hashCode * 59) + this.BlockHash.GetHashCode();
                }
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                if (this.TransactionType != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TransactionIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.LogIndex.GetHashCode();
                if (this.Operator != null)
                {
                    hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
